
Final_OOP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cb4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08004e3c  08004e3c  00014e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f74  08004f74  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004f74  08004f74  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f74  08004f74  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004f74  08004f74  00014f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f7c  08004f7c  00014f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004f80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  20000010  08004f90  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  08004f90  000203b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012d62  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000297e  00000000  00000000  00032de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c0  00000000  00000000  00035768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e85  00000000  00000000  00036a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000299d1  00000000  00000000  000378ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000143bf  00000000  00000000  0006127e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ff8d5  00000000  00000000  0007563d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004fdc  00000000  00000000  00174f14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00179ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004e24 	.word	0x08004e24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004e24 	.word	0x08004e24

080001c8 <_ZN6ScreenC1ER19__SPI_HandleTypeDef>:

class Screen
{
public:
	// Constructor
	Screen(SPI_HandleTypeDef &hspi1) : hspi1(hspi1) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	683a      	ldr	r2, [r7, #0]
 80001d6:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
		// INIT SCREEN ARRAY
		GLCD_setCursor(0,0);
 80001da:	2200      	movs	r2, #0
 80001dc:	2100      	movs	r1, #0
 80001de:	6878      	ldr	r0, [r7, #4]
 80001e0:	f000 ffca 	bl	8001178 <_ZN6Screen14GLCD_setCursorEhh>
		for (size_t i = 0; i < GLCD_WIDTH; i++)
 80001e4:	2300      	movs	r3, #0
 80001e6:	60fb      	str	r3, [r7, #12]
 80001e8:	e016      	b.n	8000218 <_ZN6ScreenC1ER19__SPI_HandleTypeDef+0x50>
		{
			for(size_t j = 0; j < GLCD_HEIGHT / 8; j++)
 80001ea:	2300      	movs	r3, #0
 80001ec:	60bb      	str	r3, [r7, #8]
 80001ee:	e00d      	b.n	800020c <_ZN6ScreenC1ER19__SPI_HandleTypeDef+0x44>
			{
				screen[i][j] = 0x00;
 80001f0:	6879      	ldr	r1, [r7, #4]
 80001f2:	68fa      	ldr	r2, [r7, #12]
 80001f4:	4613      	mov	r3, r2
 80001f6:	005b      	lsls	r3, r3, #1
 80001f8:	4413      	add	r3, r2
 80001fa:	005b      	lsls	r3, r3, #1
 80001fc:	18ca      	adds	r2, r1, r3
 80001fe:	68bb      	ldr	r3, [r7, #8]
 8000200:	4413      	add	r3, r2
 8000202:	2200      	movs	r2, #0
 8000204:	701a      	strb	r2, [r3, #0]
			for(size_t j = 0; j < GLCD_HEIGHT / 8; j++)
 8000206:	68bb      	ldr	r3, [r7, #8]
 8000208:	3301      	adds	r3, #1
 800020a:	60bb      	str	r3, [r7, #8]
 800020c:	68bb      	ldr	r3, [r7, #8]
 800020e:	2b05      	cmp	r3, #5
 8000210:	d9ee      	bls.n	80001f0 <_ZN6ScreenC1ER19__SPI_HandleTypeDef+0x28>
		for (size_t i = 0; i < GLCD_WIDTH; i++)
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	3301      	adds	r3, #1
 8000216:	60fb      	str	r3, [r7, #12]
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	2b53      	cmp	r3, #83	; 0x53
 800021c:	d9e5      	bls.n	80001ea <_ZN6ScreenC1ER19__SPI_HandleTypeDef+0x22>
			}
		}

		GLCD_init();
 800021e:	6878      	ldr	r0, [r7, #4]
 8000220:	f000 ff76 	bl	8001110 <_ZN6Screen9GLCD_initEv>
		GLCD_clear();
 8000224:	6878      	ldr	r0, [r7, #4]
 8000226:	f000 ffc3 	bl	80011b0 <_ZN6Screen10GLCD_clearEv>
	};
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	4618      	mov	r0, r3
 800022e:	3710      	adds	r7, #16
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}

08000234 <_ZN5InputC1ER17ADC_HandleTypeDefS1_>:
#include "stm32l4xx_hal.h"

class Input {
public:
	// Constructor
	Input(ADC_HandleTypeDef &hadc1, ADC_HandleTypeDef &hadc3)
 8000234:	b480      	push	{r7}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
	: hadc1(hadc1), hadc3(hadc3) {};
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	68ba      	ldr	r2, [r7, #8]
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	687a      	ldr	r2, [r7, #4]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	4618      	mov	r0, r3
 8000250:	3714      	adds	r7, #20
 8000252:	46bd      	mov	sp, r7
 8000254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000258:	4770      	bx	lr
	...

0800025c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b084      	sub	sp, #16
 8000260:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000262:	f001 f809 	bl	8001278 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000266:	f000 f8b7 	bl	80003d8 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800026a:	f000 f915 	bl	8000498 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800026e:	f000 faa5 	bl	80007bc <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8000272:	f000 f941 	bl	80004f8 <_ZL12MX_ADC1_Initv>
  MX_ADC3_Init();
 8000276:	f000 f9c5 	bl	8000604 <_ZL12MX_ADC3_Initv>
  MX_SPI1_Init();
 800027a:	f000 fa31 	bl	80006e0 <_ZL12MX_SPI1_Initv>
  MX_TIM16_Init();
 800027e:	f000 fa71 	bl	8000764 <_ZL13MX_TIM16_Initv>
  /* USER CODE BEGIN 2 */

    // Start Timer
  	HAL_TIM_Base_Start_IT(&htim16); // Start timer
 8000282:	4851      	ldr	r0, [pc, #324]	; (80003c8 <main+0x16c>)
 8000284:	f004 fb50 	bl	8004928 <HAL_TIM_Base_Start_IT>

  	// Init screen (& display)
  	screen.initScreen();
 8000288:	4850      	ldr	r0, [pc, #320]	; (80003cc <main+0x170>)
 800028a:	f000 fd68 	bl	8000d5e <_ZN6Screen10initScreenEv>

  	// Player start position
  	enum direction {UP, DOWN, LEFT, RIGHT};
	size_t x = 42;
 800028e:	232a      	movs	r3, #42	; 0x2a
 8000290:	60fb      	str	r3, [r7, #12]
	size_t y = 24;
 8000292:	2318      	movs	r3, #24
 8000294:	60bb      	str	r3, [r7, #8]
	direction movementDirection = UP;
 8000296:	2300      	movs	r3, #0
 8000298:	71fb      	strb	r3, [r7, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		// Start ADC Conversions
		input.inputStart();
 800029a:	484d      	ldr	r0, [pc, #308]	; (80003d0 <main+0x174>)
 800029c:	f000 fced 	bl	8000c7a <_ZN5Input10inputStartEv>

		// Update position

		// Change direction (Don't allow immediate reversal)
		if(input.isUp() && movementDirection != DOWN)
 80002a0:	484b      	ldr	r0, [pc, #300]	; (80003d0 <main+0x174>)
 80002a2:	f000 fd43 	bl	8000d2c <_ZN5Input4isUpEv>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d004      	beq.n	80002b6 <main+0x5a>
 80002ac:	79fb      	ldrb	r3, [r7, #7]
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d001      	beq.n	80002b6 <main+0x5a>
 80002b2:	2301      	movs	r3, #1
 80002b4:	e000      	b.n	80002b8 <main+0x5c>
 80002b6:	2300      	movs	r3, #0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <main+0x64>
		{
			movementDirection = UP;
 80002bc:	2300      	movs	r3, #0
 80002be:	71fb      	strb	r3, [r7, #7]
		}
		if(input.isDown() && movementDirection != UP)
 80002c0:	4843      	ldr	r0, [pc, #268]	; (80003d0 <main+0x174>)
 80002c2:	f000 fd1c 	bl	8000cfe <_ZN5Input6isDownEv>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d004      	beq.n	80002d6 <main+0x7a>
 80002cc:	79fb      	ldrb	r3, [r7, #7]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <main+0x7a>
 80002d2:	2301      	movs	r3, #1
 80002d4:	e000      	b.n	80002d8 <main+0x7c>
 80002d6:	2300      	movs	r3, #0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <main+0x84>
		{
			movementDirection = DOWN;
 80002dc:	2301      	movs	r3, #1
 80002de:	71fb      	strb	r3, [r7, #7]
		}
		if(input.isRight() && movementDirection != LEFT)
 80002e0:	483b      	ldr	r0, [pc, #236]	; (80003d0 <main+0x174>)
 80002e2:	f000 fcf5 	bl	8000cd0 <_ZN5Input7isRightEv>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d004      	beq.n	80002f6 <main+0x9a>
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	2b02      	cmp	r3, #2
 80002f0:	d001      	beq.n	80002f6 <main+0x9a>
 80002f2:	2301      	movs	r3, #1
 80002f4:	e000      	b.n	80002f8 <main+0x9c>
 80002f6:	2300      	movs	r3, #0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d002      	beq.n	8000302 <main+0xa6>
		{
			movementDirection = RIGHT;
 80002fc:	2303      	movs	r3, #3
 80002fe:	71fb      	strb	r3, [r7, #7]
 8000300:	e00f      	b.n	8000322 <main+0xc6>
		}
		else if(input.isLeft() && movementDirection != RIGHT)
 8000302:	4833      	ldr	r0, [pc, #204]	; (80003d0 <main+0x174>)
 8000304:	f000 fccb 	bl	8000c9e <_ZN5Input6isLeftEv>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d004      	beq.n	8000318 <main+0xbc>
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	2b03      	cmp	r3, #3
 8000312:	d001      	beq.n	8000318 <main+0xbc>
 8000314:	2301      	movs	r3, #1
 8000316:	e000      	b.n	800031a <main+0xbe>
 8000318:	2300      	movs	r3, #0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <main+0xc6>
		{
			movementDirection = LEFT;
 800031e:	2302      	movs	r3, #2
 8000320:	71fb      	strb	r3, [r7, #7]
		}

		// Increase position based on direction.
		switch (movementDirection)
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	2b03      	cmp	r3, #3
 8000326:	d82e      	bhi.n	8000386 <main+0x12a>
 8000328:	a201      	add	r2, pc, #4	; (adr r2, 8000330 <main+0xd4>)
 800032a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800032e:	bf00      	nop
 8000330:	08000341 	.word	0x08000341
 8000334:	0800034f 	.word	0x0800034f
 8000338:	0800036b 	.word	0x0800036b
 800033c:	0800035d 	.word	0x0800035d
		{
			case UP:
				if (y > 0)
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d018      	beq.n	8000378 <main+0x11c>
					y--;
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	3b01      	subs	r3, #1
 800034a:	60bb      	str	r3, [r7, #8]
				break;
 800034c:	e014      	b.n	8000378 <main+0x11c>
			case DOWN:
				if (y < GLCD_HEIGHT - 1)
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	2b2e      	cmp	r3, #46	; 0x2e
 8000352:	d813      	bhi.n	800037c <main+0x120>
					y++;
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	3301      	adds	r3, #1
 8000358:	60bb      	str	r3, [r7, #8]
				break;
 800035a:	e00f      	b.n	800037c <main+0x120>
			case RIGHT:
				if (x < GLCD_WIDTH - 1)
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	2b52      	cmp	r3, #82	; 0x52
 8000360:	d80e      	bhi.n	8000380 <main+0x124>
					x++;
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	3301      	adds	r3, #1
 8000366:	60fb      	str	r3, [r7, #12]
				break;
 8000368:	e00a      	b.n	8000380 <main+0x124>
			case LEFT:
				if (x > 0)
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d009      	beq.n	8000384 <main+0x128>
					x--;
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	3b01      	subs	r3, #1
 8000374:	60fb      	str	r3, [r7, #12]
				break;
 8000376:	e005      	b.n	8000384 <main+0x128>
				break;
 8000378:	bf00      	nop
 800037a:	e004      	b.n	8000386 <main+0x12a>
				break;
 800037c:	bf00      	nop
 800037e:	e002      	b.n	8000386 <main+0x12a>
				break;
 8000380:	bf00      	nop
 8000382:	e000      	b.n	8000386 <main+0x12a>
				break;
 8000384:	bf00      	nop
		}


		// Check for collisions.
		if(screen.pixelTaken(x, y))
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	68ba      	ldr	r2, [r7, #8]
 800038a:	4619      	mov	r1, r3
 800038c:	480f      	ldr	r0, [pc, #60]	; (80003cc <main+0x170>)
 800038e:	f000 fe13 	bl	8000fb8 <_ZN6Screen10pixelTakenEii>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d006      	beq.n	80003a6 <main+0x14a>
		{
			while(1)
				screen.displayGameOver(score);
 8000398:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <main+0x178>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4619      	mov	r1, r3
 800039e:	480b      	ldr	r0, [pc, #44]	; (80003cc <main+0x170>)
 80003a0:	f000 fd8d 	bl	8000ebe <_ZN6Screen15displayGameOverEi>
 80003a4:	e7f8      	b.n	8000398 <main+0x13c>
		}

		// Apply the pixel to the screen.
		screen.setPixel(x, y);
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	68ba      	ldr	r2, [r7, #8]
 80003aa:	4619      	mov	r1, r3
 80003ac:	4807      	ldr	r0, [pc, #28]	; (80003cc <main+0x170>)
 80003ae:	f000 fce5 	bl	8000d7c <_ZN6Screen8setPixelEii>

		// Draw Screen
		screen.displayScreen(score);
 80003b2:	4b08      	ldr	r3, [pc, #32]	; (80003d4 <main+0x178>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4619      	mov	r1, r3
 80003b8:	4804      	ldr	r0, [pc, #16]	; (80003cc <main+0x170>)
 80003ba:	f000 fd46 	bl	8000e4a <_ZN6Screen13displayScreenEi>

		// Delay to avoid super-speed.
		HAL_Delay(100);
 80003be:	2064      	movs	r0, #100	; 0x64
 80003c0:	f000 ffd6 	bl	8001370 <HAL_Delay>
		input.inputStart();
 80003c4:	e769      	b.n	800029a <main+0x3e>
 80003c6:	bf00      	nop
 80003c8:	20000158 	.word	0x20000158
 80003cc:	200001a8 	.word	0x200001a8
 80003d0:	200003a4 	.word	0x200003a4
 80003d4:	20000000 	.word	0x20000000

080003d8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b096      	sub	sp, #88	; 0x58
 80003dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003de:	f107 0314 	add.w	r3, r7, #20
 80003e2:	2244      	movs	r2, #68	; 0x44
 80003e4:	2100      	movs	r1, #0
 80003e6:	4618      	mov	r0, r3
 80003e8:	f004 fcf0 	bl	8004dcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ec:	463b      	mov	r3, r7
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	605a      	str	r2, [r3, #4]
 80003f4:	609a      	str	r2, [r3, #8]
 80003f6:	60da      	str	r2, [r3, #12]
 80003f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003fe:	f002 fbe5 	bl	8002bcc <HAL_PWREx_ControlVoltageScaling>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	bf14      	ite	ne
 8000408:	2301      	movne	r3, #1
 800040a:	2300      	moveq	r3, #0
 800040c:	b2db      	uxtb	r3, r3
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8000412:	f000 fa67 	bl	80008e4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000416:	2302      	movs	r3, #2
 8000418:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800041a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800041e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000420:	2310      	movs	r3, #16
 8000422:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000424:	2302      	movs	r3, #2
 8000426:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000428:	2302      	movs	r3, #2
 800042a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800042c:	2301      	movs	r3, #1
 800042e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000430:	230a      	movs	r3, #10
 8000432:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000434:	2307      	movs	r3, #7
 8000436:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000438:	2302      	movs	r3, #2
 800043a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800043c:	2302      	movs	r3, #2
 800043e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000440:	f107 0314 	add.w	r3, r7, #20
 8000444:	4618      	mov	r0, r3
 8000446:	f002 fc17 	bl	8002c78 <HAL_RCC_OscConfig>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	bf14      	ite	ne
 8000450:	2301      	movne	r3, #1
 8000452:	2300      	moveq	r3, #0
 8000454:	b2db      	uxtb	r3, r3
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 800045a:	f000 fa43 	bl	80008e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800045e:	230f      	movs	r3, #15
 8000460:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000462:	2303      	movs	r3, #3
 8000464:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000466:	2300      	movs	r3, #0
 8000468:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800046a:	2300      	movs	r3, #0
 800046c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800046e:	2300      	movs	r3, #0
 8000470:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000472:	463b      	mov	r3, r7
 8000474:	2104      	movs	r1, #4
 8000476:	4618      	mov	r0, r3
 8000478:	f002 ffda 	bl	8003430 <HAL_RCC_ClockConfig>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	bf14      	ite	ne
 8000482:	2301      	movne	r3, #1
 8000484:	2300      	moveq	r3, #0
 8000486:	b2db      	uxtb	r3, r3
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 800048c:	f000 fa2a 	bl	80008e4 <Error_Handler>
  }
}
 8000490:	bf00      	nop
 8000492:	3758      	adds	r7, #88	; 0x58
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}

08000498 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b0a2      	sub	sp, #136	; 0x88
 800049c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800049e:	463b      	mov	r3, r7
 80004a0:	2288      	movs	r2, #136	; 0x88
 80004a2:	2100      	movs	r1, #0
 80004a4:	4618      	mov	r0, r3
 80004a6:	f004 fc91 	bl	8004dcc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80004ae:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80004b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004b4:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80004b6:	2302      	movs	r3, #2
 80004b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80004ba:	2301      	movs	r3, #1
 80004bc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80004be:	2308      	movs	r3, #8
 80004c0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80004c2:	2307      	movs	r3, #7
 80004c4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80004c6:	2302      	movs	r3, #2
 80004c8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80004ca:	2302      	movs	r3, #2
 80004cc:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80004ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80004d2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004d4:	463b      	mov	r3, r7
 80004d6:	4618      	mov	r0, r3
 80004d8:	f003 f996 	bl	8003808 <HAL_RCCEx_PeriphCLKConfig>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	bf14      	ite	ne
 80004e2:	2301      	movne	r3, #1
 80004e4:	2300      	moveq	r3, #0
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <_Z24PeriphCommonClock_Configv+0x58>
  {
    Error_Handler();
 80004ec:	f000 f9fa 	bl	80008e4 <Error_Handler>
  }
}
 80004f0:	bf00      	nop
 80004f2:	3788      	adds	r7, #136	; 0x88
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b08a      	sub	sp, #40	; 0x28
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80004fe:	f107 031c 	add.w	r3, r7, #28
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]
 8000518:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800051a:	4b37      	ldr	r3, [pc, #220]	; (80005f8 <_ZL12MX_ADC1_Initv+0x100>)
 800051c:	4a37      	ldr	r2, [pc, #220]	; (80005fc <_ZL12MX_ADC1_Initv+0x104>)
 800051e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000520:	4b35      	ldr	r3, [pc, #212]	; (80005f8 <_ZL12MX_ADC1_Initv+0x100>)
 8000522:	2200      	movs	r2, #0
 8000524:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000526:	4b34      	ldr	r3, [pc, #208]	; (80005f8 <_ZL12MX_ADC1_Initv+0x100>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800052c:	4b32      	ldr	r3, [pc, #200]	; (80005f8 <_ZL12MX_ADC1_Initv+0x100>)
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000532:	4b31      	ldr	r3, [pc, #196]	; (80005f8 <_ZL12MX_ADC1_Initv+0x100>)
 8000534:	2200      	movs	r2, #0
 8000536:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000538:	4b2f      	ldr	r3, [pc, #188]	; (80005f8 <_ZL12MX_ADC1_Initv+0x100>)
 800053a:	2204      	movs	r2, #4
 800053c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800053e:	4b2e      	ldr	r3, [pc, #184]	; (80005f8 <_ZL12MX_ADC1_Initv+0x100>)
 8000540:	2200      	movs	r2, #0
 8000542:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000544:	4b2c      	ldr	r3, [pc, #176]	; (80005f8 <_ZL12MX_ADC1_Initv+0x100>)
 8000546:	2200      	movs	r2, #0
 8000548:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800054a:	4b2b      	ldr	r3, [pc, #172]	; (80005f8 <_ZL12MX_ADC1_Initv+0x100>)
 800054c:	2201      	movs	r2, #1
 800054e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000550:	4b29      	ldr	r3, [pc, #164]	; (80005f8 <_ZL12MX_ADC1_Initv+0x100>)
 8000552:	2200      	movs	r2, #0
 8000554:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000558:	4b27      	ldr	r3, [pc, #156]	; (80005f8 <_ZL12MX_ADC1_Initv+0x100>)
 800055a:	2200      	movs	r2, #0
 800055c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800055e:	4b26      	ldr	r3, [pc, #152]	; (80005f8 <_ZL12MX_ADC1_Initv+0x100>)
 8000560:	2200      	movs	r2, #0
 8000562:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000564:	4b24      	ldr	r3, [pc, #144]	; (80005f8 <_ZL12MX_ADC1_Initv+0x100>)
 8000566:	2200      	movs	r2, #0
 8000568:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800056c:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <_ZL12MX_ADC1_Initv+0x100>)
 800056e:	2200      	movs	r2, #0
 8000570:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000572:	4b21      	ldr	r3, [pc, #132]	; (80005f8 <_ZL12MX_ADC1_Initv+0x100>)
 8000574:	2200      	movs	r2, #0
 8000576:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800057a:	481f      	ldr	r0, [pc, #124]	; (80005f8 <_ZL12MX_ADC1_Initv+0x100>)
 800057c:	f001 f8de 	bl	800173c <HAL_ADC_Init>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	bf14      	ite	ne
 8000586:	2301      	movne	r3, #1
 8000588:	2300      	moveq	r3, #0
 800058a:	b2db      	uxtb	r3, r3
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 8000590:	f000 f9a8 	bl	80008e4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000594:	2300      	movs	r3, #0
 8000596:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000598:	f107 031c 	add.w	r3, r7, #28
 800059c:	4619      	mov	r1, r3
 800059e:	4816      	ldr	r0, [pc, #88]	; (80005f8 <_ZL12MX_ADC1_Initv+0x100>)
 80005a0:	f001 ff82 	bl	80024a8 <HAL_ADCEx_MultiModeConfigChannel>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	bf14      	ite	ne
 80005aa:	2301      	movne	r3, #1
 80005ac:	2300      	moveq	r3, #0
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 80005b4:	f000 f996 	bl	80008e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80005b8:	4b11      	ldr	r3, [pc, #68]	; (8000600 <_ZL12MX_ADC1_Initv+0x108>)
 80005ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005bc:	2306      	movs	r3, #6
 80005be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005c4:	237f      	movs	r3, #127	; 0x7f
 80005c6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005c8:	2304      	movs	r3, #4
 80005ca:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	4619      	mov	r1, r3
 80005d4:	4808      	ldr	r0, [pc, #32]	; (80005f8 <_ZL12MX_ADC1_Initv+0x100>)
 80005d6:	f001 fac9 	bl	8001b6c <HAL_ADC_ConfigChannel>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	bf14      	ite	ne
 80005e0:	2301      	movne	r3, #1
 80005e2:	2300      	moveq	r3, #0
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <_ZL12MX_ADC1_Initv+0xf6>
  {
    Error_Handler();
 80005ea:	f000 f97b 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005ee:	bf00      	nop
 80005f0:	3728      	adds	r7, #40	; 0x28
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	2000002c 	.word	0x2000002c
 80005fc:	50040000 	.word	0x50040000
 8000600:	08600004 	.word	0x08600004

08000604 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800060a:	463b      	mov	r3, r7
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
 8000618:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800061a:	4b2e      	ldr	r3, [pc, #184]	; (80006d4 <_ZL12MX_ADC3_Initv+0xd0>)
 800061c:	4a2e      	ldr	r2, [pc, #184]	; (80006d8 <_ZL12MX_ADC3_Initv+0xd4>)
 800061e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000620:	4b2c      	ldr	r3, [pc, #176]	; (80006d4 <_ZL12MX_ADC3_Initv+0xd0>)
 8000622:	2200      	movs	r2, #0
 8000624:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000626:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <_ZL12MX_ADC3_Initv+0xd0>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800062c:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <_ZL12MX_ADC3_Initv+0xd0>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000632:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <_ZL12MX_ADC3_Initv+0xd0>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000638:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <_ZL12MX_ADC3_Initv+0xd0>)
 800063a:	2204      	movs	r2, #4
 800063c:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800063e:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <_ZL12MX_ADC3_Initv+0xd0>)
 8000640:	2200      	movs	r2, #0
 8000642:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000644:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <_ZL12MX_ADC3_Initv+0xd0>)
 8000646:	2200      	movs	r2, #0
 8000648:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 800064a:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <_ZL12MX_ADC3_Initv+0xd0>)
 800064c:	2201      	movs	r2, #1
 800064e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000650:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <_ZL12MX_ADC3_Initv+0xd0>)
 8000652:	2200      	movs	r2, #0
 8000654:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <_ZL12MX_ADC3_Initv+0xd0>)
 800065a:	2200      	movs	r2, #0
 800065c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800065e:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <_ZL12MX_ADC3_Initv+0xd0>)
 8000660:	2200      	movs	r2, #0
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <_ZL12MX_ADC3_Initv+0xd0>)
 8000666:	2200      	movs	r2, #0
 8000668:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800066c:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <_ZL12MX_ADC3_Initv+0xd0>)
 800066e:	2200      	movs	r2, #0
 8000670:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000672:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <_ZL12MX_ADC3_Initv+0xd0>)
 8000674:	2200      	movs	r2, #0
 8000676:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800067a:	4816      	ldr	r0, [pc, #88]	; (80006d4 <_ZL12MX_ADC3_Initv+0xd0>)
 800067c:	f001 f85e 	bl	800173c <HAL_ADC_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	bf14      	ite	ne
 8000686:	2301      	movne	r3, #1
 8000688:	2300      	moveq	r3, #0
 800068a:	b2db      	uxtb	r3, r3
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <_ZL12MX_ADC3_Initv+0x90>
  {
    Error_Handler();
 8000690:	f000 f928 	bl	80008e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <_ZL12MX_ADC3_Initv+0xd8>)
 8000696:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000698:	2306      	movs	r3, #6
 800069a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006a0:	237f      	movs	r3, #127	; 0x7f
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006ac:	463b      	mov	r3, r7
 80006ae:	4619      	mov	r1, r3
 80006b0:	4808      	ldr	r0, [pc, #32]	; (80006d4 <_ZL12MX_ADC3_Initv+0xd0>)
 80006b2:	f001 fa5b 	bl	8001b6c <HAL_ADC_ConfigChannel>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	bf14      	ite	ne
 80006bc:	2301      	movne	r3, #1
 80006be:	2300      	moveq	r3, #0
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <_ZL12MX_ADC3_Initv+0xc6>
  {
    Error_Handler();
 80006c6:	f000 f90d 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	3718      	adds	r7, #24
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000090 	.word	0x20000090
 80006d8:	50040200 	.word	0x50040200
 80006dc:	04300002 	.word	0x04300002

080006e0 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006e4:	4b1d      	ldr	r3, [pc, #116]	; (800075c <_ZL12MX_SPI1_Initv+0x7c>)
 80006e6:	4a1e      	ldr	r2, [pc, #120]	; (8000760 <_ZL12MX_SPI1_Initv+0x80>)
 80006e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ea:	4b1c      	ldr	r3, [pc, #112]	; (800075c <_ZL12MX_SPI1_Initv+0x7c>)
 80006ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006f2:	4b1a      	ldr	r3, [pc, #104]	; (800075c <_ZL12MX_SPI1_Initv+0x7c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006f8:	4b18      	ldr	r3, [pc, #96]	; (800075c <_ZL12MX_SPI1_Initv+0x7c>)
 80006fa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80006fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000700:	4b16      	ldr	r3, [pc, #88]	; (800075c <_ZL12MX_SPI1_Initv+0x7c>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <_ZL12MX_SPI1_Initv+0x7c>)
 8000708:	2200      	movs	r2, #0
 800070a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <_ZL12MX_SPI1_Initv+0x7c>)
 800070e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000712:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <_ZL12MX_SPI1_Initv+0x7c>)
 8000716:	2220      	movs	r2, #32
 8000718:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <_ZL12MX_SPI1_Initv+0x7c>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000720:	4b0e      	ldr	r3, [pc, #56]	; (800075c <_ZL12MX_SPI1_Initv+0x7c>)
 8000722:	2200      	movs	r2, #0
 8000724:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <_ZL12MX_SPI1_Initv+0x7c>)
 8000728:	2200      	movs	r2, #0
 800072a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800072c:	4b0b      	ldr	r3, [pc, #44]	; (800075c <_ZL12MX_SPI1_Initv+0x7c>)
 800072e:	2207      	movs	r2, #7
 8000730:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000732:	4b0a      	ldr	r3, [pc, #40]	; (800075c <_ZL12MX_SPI1_Initv+0x7c>)
 8000734:	2200      	movs	r2, #0
 8000736:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <_ZL12MX_SPI1_Initv+0x7c>)
 800073a:	2208      	movs	r2, #8
 800073c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800073e:	4807      	ldr	r0, [pc, #28]	; (800075c <_ZL12MX_SPI1_Initv+0x7c>)
 8000740:	f003 fd1e 	bl	8004180 <HAL_SPI_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	bf14      	ite	ne
 800074a:	2301      	movne	r3, #1
 800074c:	2300      	moveq	r3, #0
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8000754:	f000 f8c6 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	200000f4 	.word	0x200000f4
 8000760:	40013000 	.word	0x40013000

08000764 <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <_ZL13MX_TIM16_Initv+0x50>)
 800076a:	4a13      	ldr	r2, [pc, #76]	; (80007b8 <_ZL13MX_TIM16_Initv+0x54>)
 800076c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7999;
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <_ZL13MX_TIM16_Initv+0x50>)
 8000770:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000774:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <_ZL13MX_TIM16_Initv+0x50>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 800077c:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <_ZL13MX_TIM16_Initv+0x50>)
 800077e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000782:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000784:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <_ZL13MX_TIM16_Initv+0x50>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800078a:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <_ZL13MX_TIM16_Initv+0x50>)
 800078c:	2200      	movs	r2, #0
 800078e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <_ZL13MX_TIM16_Initv+0x50>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000796:	4807      	ldr	r0, [pc, #28]	; (80007b4 <_ZL13MX_TIM16_Initv+0x50>)
 8000798:	f004 f86e 	bl	8004878 <HAL_TIM_Base_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	bf14      	ite	ne
 80007a2:	2301      	movne	r3, #1
 80007a4:	2300      	moveq	r3, #0
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <_ZL13MX_TIM16_Initv+0x4c>
  {
    Error_Handler();
 80007ac:	f000 f89a 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000158 	.word	0x20000158
 80007b8:	40014400 	.word	0x40014400

080007bc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	4b2e      	ldr	r3, [pc, #184]	; (800088c <_ZL12MX_GPIO_Initv+0xd0>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	4a2d      	ldr	r2, [pc, #180]	; (800088c <_ZL12MX_GPIO_Initv+0xd0>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007de:	4b2b      	ldr	r3, [pc, #172]	; (800088c <_ZL12MX_GPIO_Initv+0xd0>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	4b28      	ldr	r3, [pc, #160]	; (800088c <_ZL12MX_GPIO_Initv+0xd0>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	4a27      	ldr	r2, [pc, #156]	; (800088c <_ZL12MX_GPIO_Initv+0xd0>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f6:	4b25      	ldr	r3, [pc, #148]	; (800088c <_ZL12MX_GPIO_Initv+0xd0>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	4b22      	ldr	r3, [pc, #136]	; (800088c <_ZL12MX_GPIO_Initv+0xd0>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	4a21      	ldr	r2, [pc, #132]	; (800088c <_ZL12MX_GPIO_Initv+0xd0>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080e:	4b1f      	ldr	r3, [pc, #124]	; (800088c <_ZL12MX_GPIO_Initv+0xd0>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	4b1c      	ldr	r3, [pc, #112]	; (800088c <_ZL12MX_GPIO_Initv+0xd0>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	4a1b      	ldr	r2, [pc, #108]	; (800088c <_ZL12MX_GPIO_Initv+0xd0>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <_ZL12MX_GPIO_Initv+0xd0>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2103      	movs	r1, #3
 8000836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083a:	f002 f9a1 	bl	8002b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2140      	movs	r1, #64	; 0x40
 8000842:	4813      	ldr	r0, [pc, #76]	; (8000890 <_ZL12MX_GPIO_Initv+0xd4>)
 8000844:	f002 f99c 	bl	8002b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000848:	2303      	movs	r3, #3
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	2301      	movs	r3, #1
 800084e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000862:	f001 ffe3 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000866:	2340      	movs	r3, #64	; 0x40
 8000868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	4804      	ldr	r0, [pc, #16]	; (8000890 <_ZL12MX_GPIO_Initv+0xd4>)
 800087e:	f001 ffd5 	bl	800282c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000882:	bf00      	nop
 8000884:	3728      	adds	r7, #40	; 0x28
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000
 8000890:	48000400 	.word	0x48000400

08000894 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim16)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a0d      	ldr	r2, [pc, #52]	; (80008d4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d113      	bne.n	80008cc <HAL_TIM_PeriodElapsedCallback+0x38>
	{
		tim_counter++;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	3301      	adds	r3, #1
 80008aa:	4a0b      	ldr	r2, [pc, #44]	; (80008d8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80008ac:	6013      	str	r3, [r2, #0]
		score--;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	4a09      	ldr	r2, [pc, #36]	; (80008dc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80008b6:	6013      	str	r3, [r2, #0]
		// Check for gameover.
		if(tim_counter >= GAME_LENGTH)
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b1d      	cmp	r3, #29
 80008be:	d905      	bls.n	80008cc <HAL_TIM_PeriodElapsedCallback+0x38>
		{
			screen.displayGameOver(score); // To Do: Replace stand-in for score.
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4619      	mov	r1, r3
 80008c6:	4806      	ldr	r0, [pc, #24]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80008c8:	f000 faf9 	bl	8000ebe <_ZN6Screen15displayGameOverEi>
		}
	}
}
 80008cc:	bf00      	nop
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000158 	.word	0x20000158
 80008d8:	200001a4 	.word	0x200001a4
 80008dc:	20000000 	.word	0x20000000
 80008e0:	200001a8 	.word	0x200001a8

080008e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
}
 80008ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008ec:	e7fe      	b.n	80008ec <Error_Handler+0x8>
	...

080008f0 <_Z41__static_initialization_and_destruction_0ii>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d10d      	bne.n	800091c <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000906:	4293      	cmp	r3, r2
 8000908:	d108      	bne.n	800091c <_Z41__static_initialization_and_destruction_0ii+0x2c>
Screen screen(hspi1);
 800090a:	4906      	ldr	r1, [pc, #24]	; (8000924 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800090c:	4806      	ldr	r0, [pc, #24]	; (8000928 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800090e:	f7ff fc5b 	bl	80001c8 <_ZN6ScreenC1ER19__SPI_HandleTypeDef>
Input input(hadc1, hadc3);
 8000912:	4a06      	ldr	r2, [pc, #24]	; (800092c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8000914:	4906      	ldr	r1, [pc, #24]	; (8000930 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000916:	4807      	ldr	r0, [pc, #28]	; (8000934 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8000918:	f7ff fc8c 	bl	8000234 <_ZN5InputC1ER17ADC_HandleTypeDefS1_>
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	200000f4 	.word	0x200000f4
 8000928:	200001a8 	.word	0x200001a8
 800092c:	20000090 	.word	0x20000090
 8000930:	2000002c 	.word	0x2000002c
 8000934:	200003a4 	.word	0x200003a4

08000938 <_GLOBAL__sub_I_hadc1>:
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
 800093c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000940:	2001      	movs	r0, #1
 8000942:	f7ff ffd5 	bl	80008f0 <_Z41__static_initialization_and_destruction_0ii>
 8000946:	bd80      	pop	{r7, pc}

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <HAL_MspInit+0x44>)
 8000950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000952:	4a0e      	ldr	r2, [pc, #56]	; (800098c <HAL_MspInit+0x44>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6613      	str	r3, [r2, #96]	; 0x60
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <HAL_MspInit+0x44>)
 800095c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <HAL_MspInit+0x44>)
 8000968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800096a:	4a08      	ldr	r2, [pc, #32]	; (800098c <HAL_MspInit+0x44>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000970:	6593      	str	r3, [r2, #88]	; 0x58
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_MspInit+0x44>)
 8000974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40021000 	.word	0x40021000

08000990 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08c      	sub	sp, #48	; 0x30
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a33      	ldr	r2, [pc, #204]	; (8000a7c <HAL_ADC_MspInit+0xec>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d12d      	bne.n	8000a0e <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80009b2:	4b33      	ldr	r3, [pc, #204]	; (8000a80 <HAL_ADC_MspInit+0xf0>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	3301      	adds	r3, #1
 80009b8:	4a31      	ldr	r2, [pc, #196]	; (8000a80 <HAL_ADC_MspInit+0xf0>)
 80009ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80009bc:	4b30      	ldr	r3, [pc, #192]	; (8000a80 <HAL_ADC_MspInit+0xf0>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d10b      	bne.n	80009dc <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80009c4:	4b2f      	ldr	r3, [pc, #188]	; (8000a84 <HAL_ADC_MspInit+0xf4>)
 80009c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c8:	4a2e      	ldr	r2, [pc, #184]	; (8000a84 <HAL_ADC_MspInit+0xf4>)
 80009ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d0:	4b2c      	ldr	r3, [pc, #176]	; (8000a84 <HAL_ADC_MspInit+0xf4>)
 80009d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009d8:	61bb      	str	r3, [r7, #24]
 80009da:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009dc:	4b29      	ldr	r3, [pc, #164]	; (8000a84 <HAL_ADC_MspInit+0xf4>)
 80009de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e0:	4a28      	ldr	r2, [pc, #160]	; (8000a84 <HAL_ADC_MspInit+0xf4>)
 80009e2:	f043 0304 	orr.w	r3, r3, #4
 80009e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e8:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <HAL_ADC_MspInit+0xf4>)
 80009ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ec:	f003 0304 	and.w	r3, r3, #4
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009f4:	2302      	movs	r3, #2
 80009f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009f8:	230b      	movs	r3, #11
 80009fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	4820      	ldr	r0, [pc, #128]	; (8000a88 <HAL_ADC_MspInit+0xf8>)
 8000a08:	f001 ff10 	bl	800282c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000a0c:	e031      	b.n	8000a72 <HAL_ADC_MspInit+0xe2>
  else if(hadc->Instance==ADC3)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a1e      	ldr	r2, [pc, #120]	; (8000a8c <HAL_ADC_MspInit+0xfc>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d12c      	bne.n	8000a72 <HAL_ADC_MspInit+0xe2>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000a18:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <HAL_ADC_MspInit+0xf0>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	4a18      	ldr	r2, [pc, #96]	; (8000a80 <HAL_ADC_MspInit+0xf0>)
 8000a20:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000a22:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <HAL_ADC_MspInit+0xf0>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d10b      	bne.n	8000a42 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000a2a:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <HAL_ADC_MspInit+0xf4>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	4a15      	ldr	r2, [pc, #84]	; (8000a84 <HAL_ADC_MspInit+0xf4>)
 8000a30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a36:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <HAL_ADC_MspInit+0xf4>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <HAL_ADC_MspInit+0xf4>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	4a0f      	ldr	r2, [pc, #60]	; (8000a84 <HAL_ADC_MspInit+0xf4>)
 8000a48:	f043 0304 	orr.w	r3, r3, #4
 8000a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <HAL_ADC_MspInit+0xf4>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	f003 0304 	and.w	r3, r3, #4
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a5e:	230b      	movs	r3, #11
 8000a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4806      	ldr	r0, [pc, #24]	; (8000a88 <HAL_ADC_MspInit+0xf8>)
 8000a6e:	f001 fedd 	bl	800282c <HAL_GPIO_Init>
}
 8000a72:	bf00      	nop
 8000a74:	3730      	adds	r7, #48	; 0x30
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	50040000 	.word	0x50040000
 8000a80:	200003ac 	.word	0x200003ac
 8000a84:	40021000 	.word	0x40021000
 8000a88:	48000800 	.word	0x48000800
 8000a8c:	50040200 	.word	0x50040200

08000a90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	; 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a17      	ldr	r2, [pc, #92]	; (8000b0c <HAL_SPI_MspInit+0x7c>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d128      	bne.n	8000b04 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ab2:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <HAL_SPI_MspInit+0x80>)
 8000ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ab6:	4a16      	ldr	r2, [pc, #88]	; (8000b10 <HAL_SPI_MspInit+0x80>)
 8000ab8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000abc:	6613      	str	r3, [r2, #96]	; 0x60
 8000abe:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <HAL_SPI_MspInit+0x80>)
 8000ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ac2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <HAL_SPI_MspInit+0x80>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	4a10      	ldr	r2, [pc, #64]	; (8000b10 <HAL_SPI_MspInit+0x80>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <HAL_SPI_MspInit+0x80>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ae2:	23a0      	movs	r3, #160	; 0xa0
 8000ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aee:	2303      	movs	r3, #3
 8000af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000af2:	2305      	movs	r3, #5
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b00:	f001 fe94 	bl	800282c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b04:	bf00      	nop
 8000b06:	3728      	adds	r7, #40	; 0x28
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40013000 	.word	0x40013000
 8000b10:	40021000 	.word	0x40021000

08000b14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a0d      	ldr	r2, [pc, #52]	; (8000b58 <HAL_TIM_Base_MspInit+0x44>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d113      	bne.n	8000b4e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000b26:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <HAL_TIM_Base_MspInit+0x48>)
 8000b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b2a:	4a0c      	ldr	r2, [pc, #48]	; (8000b5c <HAL_TIM_Base_MspInit+0x48>)
 8000b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b30:	6613      	str	r3, [r2, #96]	; 0x60
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_TIM_Base_MspInit+0x48>)
 8000b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2100      	movs	r1, #0
 8000b42:	2019      	movs	r0, #25
 8000b44:	f001 fe3b 	bl	80027be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b48:	2019      	movs	r0, #25
 8000b4a:	f001 fe54 	bl	80027f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000b4e:	bf00      	nop
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40014400 	.word	0x40014400
 8000b5c:	40021000 	.word	0x40021000

08000b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <NMI_Handler+0x4>

08000b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <HardFault_Handler+0x4>

08000b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <MemManage_Handler+0x4>

08000b72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bac:	f000 fbc0 	bl	8001330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000bb8:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000bba:	f003 ff25 	bl	8004a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000158 	.word	0x20000158

08000bc8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <SystemInit+0x20>)
 8000bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bd2:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <SystemInit+0x20>)
 8000bd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bf0:	f7ff ffea 	bl	8000bc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf4:	480c      	ldr	r0, [pc, #48]	; (8000c28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bf6:	490d      	ldr	r1, [pc, #52]	; (8000c2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bf8:	4a0d      	ldr	r2, [pc, #52]	; (8000c30 <LoopForever+0xe>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c0c:	4c0a      	ldr	r4, [pc, #40]	; (8000c38 <LoopForever+0x16>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c1a:	f004 f8df 	bl	8004ddc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c1e:	f7ff fb1d 	bl	800025c <main>

08000c22 <LoopForever>:

LoopForever:
    b LoopForever
 8000c22:	e7fe      	b.n	8000c22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c24:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c2c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c30:	08004f80 	.word	0x08004f80
  ldr r2, =_sbss
 8000c34:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c38:	200003b4 	.word	0x200003b4

08000c3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c3c:	e7fe      	b.n	8000c3c <ADC1_2_IRQHandler>

08000c3e <_ZN5Input15getXMeasurementEv>:
	bool isRight();
	bool isDown();
	bool isUp();

private:
	uint16_t getXMeasurement()
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
	{
		//HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
		return HAL_ADC_GetValue(&hadc1);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 ff80 	bl	8001b50 <HAL_ADC_GetValue>
 8000c50:	4603      	mov	r3, r0
 8000c52:	b29b      	uxth	r3, r3
	};
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <_ZN5Input15getYMeasurementEv>:
	uint16_t getYMeasurement()
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	{
		//HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
		return HAL_ADC_GetValue(&hadc3);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f000 ff71 	bl	8001b50 <HAL_ADC_GetValue>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	b29b      	uxth	r3, r3
	};
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <_ZN5Input10inputStartEv>:

#define positiveThreshold 2000
#define negativeThreshold 1000

void Input::inputStart()
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(&hadc1);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 fea8 	bl	80019dc <HAL_ADC_Start>
	HAL_ADC_Start(&hadc3);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 fea3 	bl	80019dc <HAL_ADC_Start>
};
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <_ZN5Input6isLeftEv>:

bool Input::isLeft()
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
	if(getXMeasurement() < negativeThreshold)
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff ffc9 	bl	8000c3e <_ZN5Input15getXMeasurementEv>
 8000cac:	4603      	mov	r3, r0
 8000cae:	461a      	mov	r2, r3
 8000cb0:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	bf94      	ite	ls
 8000cb8:	2301      	movls	r3, #1
 8000cba:	2300      	movhi	r3, #0
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <_ZN5Input6isLeftEv+0x28>
		return true;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e000      	b.n	8000cc8 <_ZN5Input6isLeftEv+0x2a>
	else
		return false;
 8000cc6:	2300      	movs	r3, #0
};
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <_ZN5Input7isRightEv>:
bool Input::isRight()
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	if(getXMeasurement() > positiveThreshold)
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff ffb0 	bl	8000c3e <_ZN5Input15getXMeasurementEv>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000ce4:	bf8c      	ite	hi
 8000ce6:	2301      	movhi	r3, #1
 8000ce8:	2300      	movls	r3, #0
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <_ZN5Input7isRightEv+0x24>
		return true;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e000      	b.n	8000cf6 <_ZN5Input7isRightEv+0x26>
	else
		return false;
 8000cf4:	2300      	movs	r3, #0
};
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <_ZN5Input6isDownEv>:
bool Input::isDown()
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
	if(getYMeasurement() > positiveThreshold)
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff ffa8 	bl	8000c5c <_ZN5Input15getYMeasurementEv>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000d12:	bf8c      	ite	hi
 8000d14:	2301      	movhi	r3, #1
 8000d16:	2300      	movls	r3, #0
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <_ZN5Input6isDownEv+0x24>
		return true;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e000      	b.n	8000d24 <_ZN5Input6isDownEv+0x26>
	else
		return false;
 8000d22:	2300      	movs	r3, #0
};
 8000d24:	4618      	mov	r0, r3
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <_ZN5Input4isUpEv>:
bool Input::isUp()
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	if(getYMeasurement() < negativeThreshold)
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff ff91 	bl	8000c5c <_ZN5Input15getYMeasurementEv>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000d42:	429a      	cmp	r2, r3
 8000d44:	bf94      	ite	ls
 8000d46:	2301      	movls	r3, #1
 8000d48:	2300      	movhi	r3, #0
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <_ZN5Input4isUpEv+0x28>
		return true;
 8000d50:	2301      	movs	r3, #1
 8000d52:	e000      	b.n	8000d56 <_ZN5Input4isUpEv+0x2a>
	else
		return false;
 8000d54:	2300      	movs	r3, #0
};
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <_ZN6Screen10initScreenEv>:
#include "screen.h"

// Public Methods
void Screen::initScreen()
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
	GLCD_init();
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f000 f9d2 	bl	8001110 <_ZN6Screen9GLCD_initEv>
	clearScreen();
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f000 f83f 	bl	8000df0 <_ZN6Screen11clearScreenEv>
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <_ZN6Screen8setPixelEii>:

void Screen::setPixel(int x, int y)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b089      	sub	sp, #36	; 0x24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
	// Array to determine where pixel will sit in bank.

	// Calc needed info
	size_t column_num = x;
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	61fb      	str	r3, [r7, #28]
	size_t bank_num = y / 8;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	da00      	bge.n	8000d94 <_ZN6Screen8setPixelEii+0x18>
 8000d92:	3307      	adds	r3, #7
 8000d94:	10db      	asrs	r3, r3, #3
 8000d96:	61bb      	str	r3, [r7, #24]
	size_t y_pixel = y % 8;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	425a      	negs	r2, r3
 8000d9c:	f003 0307 	and.w	r3, r3, #7
 8000da0:	f002 0207 	and.w	r2, r2, #7
 8000da4:	bf58      	it	pl
 8000da6:	4253      	negpl	r3, r2
 8000da8:	617b      	str	r3, [r7, #20]

	// Apply pixel to screen
	screen[column_num][bank_num] = screen[column_num][bank_num] | pixels[y_pixel];
 8000daa:	68f9      	ldr	r1, [r7, #12]
 8000dac:	69fa      	ldr	r2, [r7, #28]
 8000dae:	4613      	mov	r3, r2
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	4413      	add	r3, r2
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	18ca      	adds	r2, r1, r3
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	4413      	add	r3, r2
 8000dbc:	781a      	ldrb	r2, [r3, #0]
 8000dbe:	490b      	ldr	r1, [pc, #44]	; (8000dec <_ZN6Screen8setPixelEii+0x70>)
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	440b      	add	r3, r1
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	b2d8      	uxtb	r0, r3
 8000dca:	68f9      	ldr	r1, [r7, #12]
 8000dcc:	69fa      	ldr	r2, [r7, #28]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	4413      	add	r3, r2
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	18ca      	adds	r2, r1, r3
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	4413      	add	r3, r2
 8000ddc:	4602      	mov	r2, r0
 8000dde:	701a      	strb	r2, [r3, #0]
}
 8000de0:	bf00      	nop
 8000de2:	3724      	adds	r7, #36	; 0x24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	08004e7c 	.word	0x08004e7c

08000df0 <_ZN6Screen11clearScreenEv>:

void Screen::clearScreen()
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	GLCD_setCursor(0,0);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f000 f9bb 	bl	8001178 <_ZN6Screen14GLCD_setCursorEhh>
	for (size_t i = 0; i < GLCD_WIDTH; i++)
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	e016      	b.n	8000e36 <_ZN6Screen11clearScreenEv+0x46>
	{
		for(size_t j = 0; j < GLCD_HEIGHT / 8; j++)
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	e00d      	b.n	8000e2a <_ZN6Screen11clearScreenEv+0x3a>
		{
			screen[i][j] = 0x00;
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	68fa      	ldr	r2, [r7, #12]
 8000e12:	4613      	mov	r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	4413      	add	r3, r2
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	18ca      	adds	r2, r1, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4413      	add	r3, r2
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
		for(size_t j = 0; j < GLCD_HEIGHT / 8; j++)
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	3301      	adds	r3, #1
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	2b05      	cmp	r3, #5
 8000e2e:	d9ee      	bls.n	8000e0e <_ZN6Screen11clearScreenEv+0x1e>
	for (size_t i = 0; i < GLCD_WIDTH; i++)
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	3301      	adds	r3, #1
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	2b53      	cmp	r3, #83	; 0x53
 8000e3a:	d9e5      	bls.n	8000e08 <_ZN6Screen11clearScreenEv+0x18>
		}
	}

	GLCD_clear();
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f000 f9b7 	bl	80011b0 <_ZN6Screen10GLCD_clearEv>
}
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <_ZN6Screen13displayScreenEi>:

void Screen::displayScreen(int score)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b084      	sub	sp, #16
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
 8000e52:	6039      	str	r1, [r7, #0]
	GLCD_setCursor(0,0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2100      	movs	r1, #0
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f000 f98d 	bl	8001178 <_ZN6Screen14GLCD_setCursorEhh>
	for (size_t i = 0; i < GLCD_WIDTH; i++)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	e021      	b.n	8000ea8 <_ZN6Screen13displayScreenEi+0x5e>
	{
		for(size_t j = 0; j < GLCD_HEIGHT / 8; j++)
 8000e64:	2300      	movs	r3, #0
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	e018      	b.n	8000e9c <_ZN6Screen13displayScreenEi+0x52>
		{
			GLCD_setCursor(i,j);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	4619      	mov	r1, r3
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f000 f97f 	bl	8001178 <_ZN6Screen14GLCD_setCursorEhh>
			GLCD_data_write(screen[i][j]);
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	68fa      	ldr	r2, [r7, #12]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	4413      	add	r3, r2
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	18ca      	adds	r2, r1, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	4619      	mov	r1, r3
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f000 f913 	bl	80010bc <_ZN6Screen15GLCD_data_writeEh>
		for(size_t j = 0; j < GLCD_HEIGHT / 8; j++)
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	2b05      	cmp	r3, #5
 8000ea0:	d9e3      	bls.n	8000e6a <_ZN6Screen13displayScreenEi+0x20>
	for (size_t i = 0; i < GLCD_WIDTH; i++)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	2b53      	cmp	r3, #83	; 0x53
 8000eac:	d9da      	bls.n	8000e64 <_ZN6Screen13displayScreenEi+0x1a>
		}
	}

	displayScore(score);
 8000eae:	6839      	ldr	r1, [r7, #0]
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f000 f8b5 	bl	8001020 <_ZN6Screen12displayScoreEi>
}
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <_ZN6Screen15displayGameOverEi>:

void Screen::displayGameOver(int score)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
 8000ec6:	6039      	str	r1, [r7, #0]
	while(1){
		GLCD_clear();
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f000 f971 	bl	80011b0 <_ZN6Screen10GLCD_clearEv>
		// Display GAME OVER
		GLCD_setCursor(13, 2);
 8000ece:	2202      	movs	r2, #2
 8000ed0:	210d      	movs	r1, #13
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f000 f950 	bl	8001178 <_ZN6Screen14GLCD_setCursorEhh>
		GLCD_putchar(7);  // G
 8000ed8:	2107      	movs	r1, #7
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f000 f984 	bl	80011e8 <_ZN6Screen12GLCD_putcharEi>
		GLCD_putchar(1);  // A
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f000 f980 	bl	80011e8 <_ZN6Screen12GLCD_putcharEi>
		GLCD_putchar(13); // M
 8000ee8:	210d      	movs	r1, #13
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f000 f97c 	bl	80011e8 <_ZN6Screen12GLCD_putcharEi>
		GLCD_putchar(5);  // E
 8000ef0:	2105      	movs	r1, #5
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f000 f978 	bl	80011e8 <_ZN6Screen12GLCD_putcharEi>
		GLCD_putchar(0);  // space
 8000ef8:	2100      	movs	r1, #0
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f000 f974 	bl	80011e8 <_ZN6Screen12GLCD_putcharEi>
		GLCD_putchar(15); // O
 8000f00:	210f      	movs	r1, #15
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f000 f970 	bl	80011e8 <_ZN6Screen12GLCD_putcharEi>
		GLCD_putchar(22); // V
 8000f08:	2116      	movs	r1, #22
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f000 f96c 	bl	80011e8 <_ZN6Screen12GLCD_putcharEi>
		GLCD_putchar(5);  // E
 8000f10:	2105      	movs	r1, #5
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f000 f968 	bl	80011e8 <_ZN6Screen12GLCD_putcharEi>
		GLCD_putchar(18); // R
 8000f18:	2112      	movs	r1, #18
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f000 f964 	bl	80011e8 <_ZN6Screen12GLCD_putcharEi>

		// Show Score
		// To Do: Would be cool if this flashed.
		if (score == 0)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d121      	bne.n	8000f6a <_ZN6Screen15displayGameOverEi+0xac>
		{
			GLCD_setCursor(19, 3);
 8000f26:	2203      	movs	r2, #3
 8000f28:	2113      	movs	r1, #19
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f000 f924 	bl	8001178 <_ZN6Screen14GLCD_setCursorEhh>
			GLCD_putchar(25);  // Y
 8000f30:	2119      	movs	r1, #25
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f000 f958 	bl	80011e8 <_ZN6Screen12GLCD_putcharEi>
			GLCD_putchar(15);  // O
 8000f38:	210f      	movs	r1, #15
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f000 f954 	bl	80011e8 <_ZN6Screen12GLCD_putcharEi>
			GLCD_putchar(21);  // U
 8000f40:	2115      	movs	r1, #21
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f000 f950 	bl	80011e8 <_ZN6Screen12GLCD_putcharEi>
			GLCD_putchar(0);   // space
 8000f48:	2100      	movs	r1, #0
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f000 f94c 	bl	80011e8 <_ZN6Screen12GLCD_putcharEi>
			GLCD_putchar(23);  // W
 8000f50:	2117      	movs	r1, #23
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f000 f948 	bl	80011e8 <_ZN6Screen12GLCD_putcharEi>
			GLCD_putchar(15);  // O
 8000f58:	210f      	movs	r1, #15
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f000 f944 	bl	80011e8 <_ZN6Screen12GLCD_putcharEi>
			GLCD_putchar(14);  // N
 8000f60:	210e      	movs	r1, #14
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f000 f940 	bl	80011e8 <_ZN6Screen12GLCD_putcharEi>
 8000f68:	e7ae      	b.n	8000ec8 <_ZN6Screen15displayGameOverEi+0xa>
		}
		else
		{
			GLCD_setCursor(16, 3);
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	2110      	movs	r1, #16
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f000 f902 	bl	8001178 <_ZN6Screen14GLCD_setCursorEhh>
			GLCD_putchar(25);  // Y
 8000f74:	2119      	movs	r1, #25
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f000 f936 	bl	80011e8 <_ZN6Screen12GLCD_putcharEi>
			GLCD_putchar(15);  // O
 8000f7c:	210f      	movs	r1, #15
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f000 f932 	bl	80011e8 <_ZN6Screen12GLCD_putcharEi>
			GLCD_putchar(21);  // U
 8000f84:	2115      	movs	r1, #21
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f000 f92e 	bl	80011e8 <_ZN6Screen12GLCD_putcharEi>
			GLCD_putchar(0);   // space
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f000 f92a 	bl	80011e8 <_ZN6Screen12GLCD_putcharEi>
			GLCD_putchar(12);  // L
 8000f94:	210c      	movs	r1, #12
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f000 f926 	bl	80011e8 <_ZN6Screen12GLCD_putcharEi>
			GLCD_putchar(15);  // O
 8000f9c:	210f      	movs	r1, #15
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 f922 	bl	80011e8 <_ZN6Screen12GLCD_putcharEi>
			GLCD_putchar(19);  // S
 8000fa4:	2113      	movs	r1, #19
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f000 f91e 	bl	80011e8 <_ZN6Screen12GLCD_putcharEi>
			GLCD_putchar(5);   // E
 8000fac:	2105      	movs	r1, #5
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 f91a 	bl	80011e8 <_ZN6Screen12GLCD_putcharEi>
		GLCD_clear();
 8000fb4:	e788      	b.n	8000ec8 <_ZN6Screen15displayGameOverEi+0xa>
	...

08000fb8 <_ZN6Screen10pixelTakenEii>:

	}
}

bool Screen::pixelTaken(int x, int y)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b089      	sub	sp, #36	; 0x24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
	// Calc needed info To Do: Make this priv functions?
	size_t column_num = x;
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	61fb      	str	r3, [r7, #28]
	size_t bank_num = y / 8;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	da00      	bge.n	8000fd0 <_ZN6Screen10pixelTakenEii+0x18>
 8000fce:	3307      	adds	r3, #7
 8000fd0:	10db      	asrs	r3, r3, #3
 8000fd2:	61bb      	str	r3, [r7, #24]
	size_t y_pixel = y % 8;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	425a      	negs	r2, r3
 8000fd8:	f003 0307 	and.w	r3, r3, #7
 8000fdc:	f002 0207 	and.w	r2, r2, #7
 8000fe0:	bf58      	it	pl
 8000fe2:	4253      	negpl	r3, r2
 8000fe4:	617b      	str	r3, [r7, #20]

	//screen[column_num][bank_num] = screen[column_num][bank_num] | pixels[y_pixel];
	return screen[column_num][bank_num] & pixels[y_pixel];
 8000fe6:	68f9      	ldr	r1, [r7, #12]
 8000fe8:	69fa      	ldr	r2, [r7, #28]
 8000fea:	4613      	mov	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4413      	add	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	18ca      	adds	r2, r1, r3
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	781a      	ldrb	r2, [r3, #0]
 8000ffa:	4908      	ldr	r1, [pc, #32]	; (800101c <_ZN6Screen10pixelTakenEii+0x64>)
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	440b      	add	r3, r1
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	4013      	ands	r3, r2
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	bf14      	ite	ne
 800100a:	2301      	movne	r3, #1
 800100c:	2300      	moveq	r3, #0
 800100e:	b2db      	uxtb	r3, r3
}
 8001010:	4618      	mov	r0, r3
 8001012:	3724      	adds	r7, #36	; 0x24
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	08004e7c 	.word	0x08004e7c

08001020 <_ZN6Screen12displayScoreEi>:

// Private Methods

void Screen::displayScore(int score)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
	if (score <= 30)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	2b1e      	cmp	r3, #30
 800102e:	dc1e      	bgt.n	800106e <_ZN6Screen12displayScoreEi+0x4e>
	{
		GLCD_setCursor(72,0);
 8001030:	2200      	movs	r2, #0
 8001032:	2148      	movs	r1, #72	; 0x48
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f000 f89f 	bl	8001178 <_ZN6Screen14GLCD_setCursorEhh>
		GLCD_putnum(score / 10);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	4a0e      	ldr	r2, [pc, #56]	; (8001078 <_ZN6Screen12displayScoreEi+0x58>)
 800103e:	fb82 1203 	smull	r1, r2, r2, r3
 8001042:	1092      	asrs	r2, r2, #2
 8001044:	17db      	asrs	r3, r3, #31
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	4619      	mov	r1, r3
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 f8f0 	bl	8001230 <_ZN6Screen11GLCD_putnumEi>
		GLCD_putnum(score % 10);
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <_ZN6Screen12displayScoreEi+0x58>)
 8001054:	fb83 1302 	smull	r1, r3, r3, r2
 8001058:	1099      	asrs	r1, r3, #2
 800105a:	17d3      	asrs	r3, r2, #31
 800105c:	1ac9      	subs	r1, r1, r3
 800105e:	460b      	mov	r3, r1
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	440b      	add	r3, r1
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	1ad1      	subs	r1, r2, r3
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f000 f8e1 	bl	8001230 <_ZN6Screen11GLCD_putnumEi>
	}
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	66666667 	.word	0x66666667

0800107c <_ZN6Screen9SPI_writeEh>:

void Screen::SPI_write(unsigned char data) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	460b      	mov	r3, r1
 8001086:	70fb      	strb	r3, [r7, #3]
	// Chip Enable (low is asserted)
	HAL_GPIO_WritePin(CE_PORT, CE_PIN, GPIO_PIN_RESET);
 8001088:	2200      	movs	r2, #0
 800108a:	2140      	movs	r1, #64	; 0x40
 800108c:	480a      	ldr	r0, [pc, #40]	; (80010b8 <_ZN6Screen9SPI_writeEh+0x3c>)
 800108e:	f001 fd77 	bl	8002b80 <HAL_GPIO_WritePin>
	// Send data over SPI1
	HAL_SPI_Transmit(&hspi1,(uint8_t*) &data, 1, HAL_MAX_DELAY);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f8d3 01f8 	ldr.w	r0, [r3, #504]	; 0x1f8
 8001098:	1cf9      	adds	r1, r7, #3
 800109a:	f04f 33ff 	mov.w	r3, #4294967295
 800109e:	2201      	movs	r2, #1
 80010a0:	f003 f911 	bl	80042c6 <HAL_SPI_Transmit>
	// Chip Disable
	HAL_GPIO_WritePin(CE_PORT, CE_PIN, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	2140      	movs	r1, #64	; 0x40
 80010a8:	4803      	ldr	r0, [pc, #12]	; (80010b8 <_ZN6Screen9SPI_writeEh+0x3c>)
 80010aa:	f001 fd69 	bl	8002b80 <HAL_GPIO_WritePin>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	48000400 	.word	0x48000400

080010bc <_ZN6Screen15GLCD_data_writeEh>:

void Screen::GLCD_data_write(unsigned char data){
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	70fb      	strb	r3, [r7, #3]
	// Switch to "data" mode (D/C pin high)
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80010c8:	2201      	movs	r2, #1
 80010ca:	2101      	movs	r1, #1
 80010cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d0:	f001 fd56 	bl	8002b80 <HAL_GPIO_WritePin>
	// Send data over SPI
	SPI_write(data);
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	4619      	mov	r1, r3
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff ffcf 	bl	800107c <_ZN6Screen9SPI_writeEh>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <_ZN6Screen18GLCD_command_writeEh>:
void Screen::GLCD_command_write(unsigned char data){
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	460b      	mov	r3, r1
 80010f0:	70fb      	strb	r3, [r7, #3]
	// Switch to "command" mode (D/C pin low)
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2101      	movs	r1, #1
 80010f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fa:	f001 fd41 	bl	8002b80 <HAL_GPIO_WritePin>
	// Send data over SPI
	SPI_write(data);
 80010fe:	78fb      	ldrb	r3, [r7, #3]
 8001100:	4619      	mov	r1, r3
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ffba 	bl	800107c <_ZN6Screen9SPI_writeEh>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <_ZN6Screen9GLCD_initEv>:

void Screen::GLCD_init(void){
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	// Keep CE high when not transmitting
	HAL_GPIO_WritePin(CE_PORT, CE_PIN, GPIO_PIN_SET);
 8001118:	2201      	movs	r2, #1
 800111a:	2140      	movs	r1, #64	; 0x40
 800111c:	4815      	ldr	r0, [pc, #84]	; (8001174 <_ZN6Screen9GLCD_initEv+0x64>)
 800111e:	f001 fd2f 	bl	8002b80 <HAL_GPIO_WritePin>
	// Reset the screen (low pulse - down & up)
	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	2102      	movs	r1, #2
 8001126:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112a:	f001 fd29 	bl	8002b80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_SET);
 800112e:	2201      	movs	r2, #1
 8001130:	2102      	movs	r1, #2
 8001132:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001136:	f001 fd23 	bl	8002b80 <HAL_GPIO_WritePin>
	// Configure the screen (according to the datasheet)
	GLCD_command_write(0x21); // enter extended command mode
 800113a:	2121      	movs	r1, #33	; 0x21
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ffd2 	bl	80010e6 <_ZN6Screen18GLCD_command_writeEh>
	GLCD_command_write(0xB0); // set LCD Vop for contrast (this may be adjusted)
 8001142:	21b0      	movs	r1, #176	; 0xb0
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff ffce 	bl	80010e6 <_ZN6Screen18GLCD_command_writeEh>
	GLCD_command_write(0x04); // set temp coefficient
 800114a:	2104      	movs	r1, #4
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ffca 	bl	80010e6 <_ZN6Screen18GLCD_command_writeEh>
	GLCD_command_write(0x15); // set LCD bias mode (this may be adjusted)
 8001152:	2115      	movs	r1, #21
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ffc6 	bl	80010e6 <_ZN6Screen18GLCD_command_writeEh>
	GLCD_command_write(0x20); // return to normal command mode
 800115a:	2120      	movs	r1, #32
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ffc2 	bl	80010e6 <_ZN6Screen18GLCD_command_writeEh>
	GLCD_command_write(0x0C); // set display mode normal
 8001162:	210c      	movs	r1, #12
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ffbe 	bl	80010e6 <_ZN6Screen18GLCD_command_writeEh>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	48000400 	.word	0x48000400

08001178 <_ZN6Screen14GLCD_setCursorEhh>:
void Screen::GLCD_setCursor(unsigned char x, unsigned char y){
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	70fb      	strb	r3, [r7, #3]
 8001184:	4613      	mov	r3, r2
 8001186:	70bb      	strb	r3, [r7, #2]
	GLCD_command_write(0x80 | x); // column
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800118e:	b2db      	uxtb	r3, r3
 8001190:	4619      	mov	r1, r3
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ffa7 	bl	80010e6 <_ZN6Screen18GLCD_command_writeEh>
	GLCD_command_write(0x40 | y); // bank
 8001198:	78bb      	ldrb	r3, [r7, #2]
 800119a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	4619      	mov	r1, r3
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ff9f 	bl	80010e6 <_ZN6Screen18GLCD_command_writeEh>
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <_ZN6Screen10GLCD_clearEv>:
void Screen::GLCD_clear(void){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	int i;
	for(i = 0; i < (GLCD_WIDTH * NUM_BANKS); i++)
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	e006      	b.n	80011cc <_ZN6Screen10GLCD_clearEv+0x1c>
	{
		GLCD_data_write(0x00); // write zeros
 80011be:	2100      	movs	r1, #0
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ff7b 	bl	80010bc <_ZN6Screen15GLCD_data_writeEh>
	for(i = 0; i < (GLCD_WIDTH * NUM_BANKS); i++)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	3301      	adds	r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80011d2:	dbf4      	blt.n	80011be <_ZN6Screen10GLCD_clearEv+0xe>
	}
	GLCD_setCursor(0,0); // return cursor to top left
 80011d4:	2200      	movs	r2, #0
 80011d6:	2100      	movs	r1, #0
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ffcd 	bl	8001178 <_ZN6Screen14GLCD_setCursorEhh>
}
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <_ZN6Screen12GLCD_putcharEi>:

void Screen::GLCD_putchar(int font_table_row){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
	int i;
	for (i=0; i<6; i++)
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	e010      	b.n	800121a <_ZN6Screen12GLCD_putcharEi+0x32>
	{
		GLCD_data_write(font_table[font_table_row][i]);
 80011f8:	490c      	ldr	r1, [pc, #48]	; (800122c <_ZN6Screen12GLCD_putcharEi+0x44>)
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	4613      	mov	r3, r2
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	4413      	add	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	18ca      	adds	r2, r1, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4413      	add	r3, r2
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4619      	mov	r1, r3
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff ff54 	bl	80010bc <_ZN6Screen15GLCD_data_writeEh>
	for (i=0; i<6; i++)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	3301      	adds	r3, #1
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2b05      	cmp	r3, #5
 800121e:	ddeb      	ble.n	80011f8 <_ZN6Screen12GLCD_putcharEi+0x10>
	}
}
 8001220:	bf00      	nop
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	08004ec0 	.word	0x08004ec0

08001230 <_ZN6Screen11GLCD_putnumEi>:

void Screen::GLCD_putnum(int font_table_row){
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
	int i;
	for (i=0; i<6; i++)
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	e010      	b.n	8001262 <_ZN6Screen11GLCD_putnumEi+0x32>
	{
		GLCD_data_write(number_font_table[font_table_row][i]);
 8001240:	490c      	ldr	r1, [pc, #48]	; (8001274 <_ZN6Screen11GLCD_putnumEi+0x44>)
 8001242:	683a      	ldr	r2, [r7, #0]
 8001244:	4613      	mov	r3, r2
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	4413      	add	r3, r2
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	18ca      	adds	r2, r1, r3
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	4413      	add	r3, r2
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	4619      	mov	r1, r3
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ff30 	bl	80010bc <_ZN6Screen15GLCD_data_writeEh>
	for (i=0; i<6; i++)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3301      	adds	r3, #1
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2b05      	cmp	r3, #5
 8001266:	ddeb      	ble.n	8001240 <_ZN6Screen11GLCD_putnumEi+0x10>
	}
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	08004e84 	.word	0x08004e84

08001278 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001282:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <HAL_Init+0x3c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a0b      	ldr	r2, [pc, #44]	; (80012b4 <HAL_Init+0x3c>)
 8001288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800128c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800128e:	2003      	movs	r0, #3
 8001290:	f001 fa8a 	bl	80027a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001294:	2000      	movs	r0, #0
 8001296:	f000 f80f 	bl	80012b8 <HAL_InitTick>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d002      	beq.n	80012a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	71fb      	strb	r3, [r7, #7]
 80012a4:	e001      	b.n	80012aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012a6:	f7ff fb4f 	bl	8000948 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012aa:	79fb      	ldrb	r3, [r7, #7]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40022000 	.word	0x40022000

080012b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012c0:	2300      	movs	r3, #0
 80012c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012c4:	4b17      	ldr	r3, [pc, #92]	; (8001324 <HAL_InitTick+0x6c>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d023      	beq.n	8001314 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012cc:	4b16      	ldr	r3, [pc, #88]	; (8001328 <HAL_InitTick+0x70>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b14      	ldr	r3, [pc, #80]	; (8001324 <HAL_InitTick+0x6c>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	4619      	mov	r1, r3
 80012d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012da:	fbb3 f3f1 	udiv	r3, r3, r1
 80012de:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e2:	4618      	mov	r0, r3
 80012e4:	f001 fa95 	bl	8002812 <HAL_SYSTICK_Config>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10f      	bne.n	800130e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b0f      	cmp	r3, #15
 80012f2:	d809      	bhi.n	8001308 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f4:	2200      	movs	r2, #0
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f001 fa5f 	bl	80027be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001300:	4a0a      	ldr	r2, [pc, #40]	; (800132c <HAL_InitTick+0x74>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	e007      	b.n	8001318 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	73fb      	strb	r3, [r7, #15]
 800130c:	e004      	b.n	8001318 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	73fb      	strb	r3, [r7, #15]
 8001312:	e001      	b.n	8001318 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001318:	7bfb      	ldrb	r3, [r7, #15]
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	2000000c 	.word	0x2000000c
 8001328:	20000004 	.word	0x20000004
 800132c:	20000008 	.word	0x20000008

08001330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_IncTick+0x20>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_IncTick+0x24>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4413      	add	r3, r2
 8001340:	4a04      	ldr	r2, [pc, #16]	; (8001354 <HAL_IncTick+0x24>)
 8001342:	6013      	str	r3, [r2, #0]
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	2000000c 	.word	0x2000000c
 8001354:	200003b0 	.word	0x200003b0

08001358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return uwTick;
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <HAL_GetTick+0x14>)
 800135e:	681b      	ldr	r3, [r3, #0]
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	200003b0 	.word	0x200003b0

08001370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001378:	f7ff ffee 	bl	8001358 <HAL_GetTick>
 800137c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001388:	d005      	beq.n	8001396 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <HAL_Delay+0x44>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	461a      	mov	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4413      	add	r3, r2
 8001394:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001396:	bf00      	nop
 8001398:	f7ff ffde 	bl	8001358 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d8f7      	bhi.n	8001398 <HAL_Delay+0x28>
  {
  }
}
 80013a8:	bf00      	nop
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	2000000c 	.word	0x2000000c

080013b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	431a      	orrs	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	609a      	str	r2, [r3, #8]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	431a      	orrs	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	609a      	str	r2, [r3, #8]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001420:	b480      	push	{r7}
 8001422:	b087      	sub	sp, #28
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
 800142c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	3360      	adds	r3, #96	; 0x60
 8001432:	461a      	mov	r2, r3
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <LL_ADC_SetOffset+0x44>)
 8001442:	4013      	ands	r3, r2
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	430a      	orrs	r2, r1
 800144e:	4313      	orrs	r3, r2
 8001450:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001458:	bf00      	nop
 800145a:	371c      	adds	r7, #28
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	03fff000 	.word	0x03fff000

08001468 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3360      	adds	r3, #96	; 0x60
 8001476:	461a      	mov	r2, r3
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001488:	4618      	mov	r0, r3
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001494:	b480      	push	{r7}
 8001496:	b087      	sub	sp, #28
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	3360      	adds	r3, #96	; 0x60
 80014a4:	461a      	mov	r2, r3
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	431a      	orrs	r2, r3
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80014be:	bf00      	nop
 80014c0:	371c      	adds	r7, #28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b087      	sub	sp, #28
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	60f8      	str	r0, [r7, #12]
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	3330      	adds	r3, #48	; 0x30
 80014da:	461a      	mov	r2, r3
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	0a1b      	lsrs	r3, r3, #8
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	f003 030c 	and.w	r3, r3, #12
 80014e6:	4413      	add	r3, r2
 80014e8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	f003 031f 	and.w	r3, r3, #31
 80014f4:	211f      	movs	r1, #31
 80014f6:	fa01 f303 	lsl.w	r3, r1, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	401a      	ands	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	0e9b      	lsrs	r3, r3, #26
 8001502:	f003 011f 	and.w	r1, r3, #31
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	f003 031f 	and.w	r3, r3, #31
 800150c:	fa01 f303 	lsl.w	r3, r1, r3
 8001510:	431a      	orrs	r2, r3
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001516:	bf00      	nop
 8001518:	371c      	adds	r7, #28
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001522:	b480      	push	{r7}
 8001524:	b087      	sub	sp, #28
 8001526:	af00      	add	r7, sp, #0
 8001528:	60f8      	str	r0, [r7, #12]
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	3314      	adds	r3, #20
 8001532:	461a      	mov	r2, r3
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	0e5b      	lsrs	r3, r3, #25
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	4413      	add	r3, r2
 8001540:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	0d1b      	lsrs	r3, r3, #20
 800154a:	f003 031f 	and.w	r3, r3, #31
 800154e:	2107      	movs	r1, #7
 8001550:	fa01 f303 	lsl.w	r3, r1, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	401a      	ands	r2, r3
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	0d1b      	lsrs	r3, r3, #20
 800155c:	f003 031f 	and.w	r3, r3, #31
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	fa01 f303 	lsl.w	r3, r1, r3
 8001566:	431a      	orrs	r2, r3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800156c:	bf00      	nop
 800156e:	371c      	adds	r7, #28
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001590:	43db      	mvns	r3, r3
 8001592:	401a      	ands	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f003 0318 	and.w	r3, r3, #24
 800159a:	4908      	ldr	r1, [pc, #32]	; (80015bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800159c:	40d9      	lsrs	r1, r3
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	400b      	ands	r3, r1
 80015a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015a6:	431a      	orrs	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80015ae:	bf00      	nop
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	0007ffff 	.word	0x0007ffff

080015c0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 031f 	and.w	r3, r3, #31
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80015ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6093      	str	r3, [r2, #8]
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001614:	d101      	bne.n	800161a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001638:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800163c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001660:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001664:	d101      	bne.n	800166a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001666:	2301      	movs	r3, #1
 8001668:	e000      	b.n	800166c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001688:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800168c:	f043 0201 	orr.w	r2, r3, #1
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d101      	bne.n	80016b8 <LL_ADC_IsEnabled+0x18>
 80016b4:	2301      	movs	r3, #1
 80016b6:	e000      	b.n	80016ba <LL_ADC_IsEnabled+0x1a>
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80016d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016da:	f043 0204 	orr.w	r2, r3, #4
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	2b04      	cmp	r3, #4
 8001700:	d101      	bne.n	8001706 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001702:	2301      	movs	r3, #1
 8001704:	e000      	b.n	8001708 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 0308 	and.w	r3, r3, #8
 8001724:	2b08      	cmp	r3, #8
 8001726:	d101      	bne.n	800172c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001728:	2301      	movs	r3, #1
 800172a:	e000      	b.n	800172e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
	...

0800173c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800173c:	b590      	push	{r4, r7, lr}
 800173e:	b089      	sub	sp, #36	; 0x24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e130      	b.n	80019b8 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001760:	2b00      	cmp	r3, #0
 8001762:	d109      	bne.n	8001778 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff f913 	bl	8000990 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff3f 	bl	8001600 <LL_ADC_IsDeepPowerDownEnabled>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d004      	beq.n	8001792 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff25 	bl	80015dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff ff5a 	bl	8001650 <LL_ADC_IsInternalRegulatorEnabled>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d115      	bne.n	80017ce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff ff3e 	bl	8001628 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017ac:	4b84      	ldr	r3, [pc, #528]	; (80019c0 <HAL_ADC_Init+0x284>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	099b      	lsrs	r3, r3, #6
 80017b2:	4a84      	ldr	r2, [pc, #528]	; (80019c4 <HAL_ADC_Init+0x288>)
 80017b4:	fba2 2303 	umull	r2, r3, r2, r3
 80017b8:	099b      	lsrs	r3, r3, #6
 80017ba:	3301      	adds	r3, #1
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80017c0:	e002      	b.n	80017c8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f9      	bne.n	80017c2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff ff3c 	bl	8001650 <LL_ADC_IsInternalRegulatorEnabled>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10d      	bne.n	80017fa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e2:	f043 0210 	orr.w	r2, r3, #16
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ee:	f043 0201 	orr.w	r2, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff ff75 	bl	80016ee <LL_ADC_REG_IsConversionOngoing>
 8001804:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180a:	f003 0310 	and.w	r3, r3, #16
 800180e:	2b00      	cmp	r3, #0
 8001810:	f040 80c9 	bne.w	80019a6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	2b00      	cmp	r3, #0
 8001818:	f040 80c5 	bne.w	80019a6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001820:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001824:	f043 0202 	orr.w	r2, r3, #2
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff35 	bl	80016a0 <LL_ADC_IsEnabled>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d115      	bne.n	8001868 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800183c:	4862      	ldr	r0, [pc, #392]	; (80019c8 <HAL_ADC_Init+0x28c>)
 800183e:	f7ff ff2f 	bl	80016a0 <LL_ADC_IsEnabled>
 8001842:	4604      	mov	r4, r0
 8001844:	4861      	ldr	r0, [pc, #388]	; (80019cc <HAL_ADC_Init+0x290>)
 8001846:	f7ff ff2b 	bl	80016a0 <LL_ADC_IsEnabled>
 800184a:	4603      	mov	r3, r0
 800184c:	431c      	orrs	r4, r3
 800184e:	4860      	ldr	r0, [pc, #384]	; (80019d0 <HAL_ADC_Init+0x294>)
 8001850:	f7ff ff26 	bl	80016a0 <LL_ADC_IsEnabled>
 8001854:	4603      	mov	r3, r0
 8001856:	4323      	orrs	r3, r4
 8001858:	2b00      	cmp	r3, #0
 800185a:	d105      	bne.n	8001868 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	4619      	mov	r1, r3
 8001862:	485c      	ldr	r0, [pc, #368]	; (80019d4 <HAL_ADC_Init+0x298>)
 8001864:	f7ff fda8 	bl	80013b8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	7e5b      	ldrb	r3, [r3, #25]
 800186c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001872:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001878:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800187e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001886:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001888:	4313      	orrs	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d106      	bne.n	80018a4 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189a:	3b01      	subs	r3, #1
 800189c:	045b      	lsls	r3, r3, #17
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d009      	beq.n	80018c0 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68da      	ldr	r2, [r3, #12]
 80018c6:	4b44      	ldr	r3, [pc, #272]	; (80019d8 <HAL_ADC_Init+0x29c>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6812      	ldr	r2, [r2, #0]
 80018ce:	69b9      	ldr	r1, [r7, #24]
 80018d0:	430b      	orrs	r3, r1
 80018d2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff1b 	bl	8001714 <LL_ADC_INJ_IsConversionOngoing>
 80018de:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d13d      	bne.n	8001962 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d13a      	bne.n	8001962 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80018f0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018f8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001908:	f023 0302 	bic.w	r3, r3, #2
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	69b9      	ldr	r1, [r7, #24]
 8001912:	430b      	orrs	r3, r1
 8001914:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800191c:	2b01      	cmp	r3, #1
 800191e:	d118      	bne.n	8001952 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800192a:	f023 0304 	bic.w	r3, r3, #4
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001936:	4311      	orrs	r1, r2
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800193c:	4311      	orrs	r1, r2
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001942:	430a      	orrs	r2, r1
 8001944:	431a      	orrs	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f042 0201 	orr.w	r2, r2, #1
 800194e:	611a      	str	r2, [r3, #16]
 8001950:	e007      	b.n	8001962 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	691a      	ldr	r2, [r3, #16]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 0201 	bic.w	r2, r2, #1
 8001960:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d10c      	bne.n	8001984 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001970:	f023 010f 	bic.w	r1, r3, #15
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	1e5a      	subs	r2, r3, #1
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	430a      	orrs	r2, r1
 8001980:	631a      	str	r2, [r3, #48]	; 0x30
 8001982:	e007      	b.n	8001994 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 020f 	bic.w	r2, r2, #15
 8001992:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001998:	f023 0303 	bic.w	r3, r3, #3
 800199c:	f043 0201 	orr.w	r2, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	655a      	str	r2, [r3, #84]	; 0x54
 80019a4:	e007      	b.n	80019b6 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019aa:	f043 0210 	orr.w	r2, r3, #16
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80019b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3724      	adds	r7, #36	; 0x24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd90      	pop	{r4, r7, pc}
 80019c0:	20000004 	.word	0x20000004
 80019c4:	053e2d63 	.word	0x053e2d63
 80019c8:	50040000 	.word	0x50040000
 80019cc:	50040100 	.word	0x50040100
 80019d0:	50040200 	.word	0x50040200
 80019d4:	50040300 	.word	0x50040300
 80019d8:	fff0c007 	.word	0xfff0c007

080019dc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019e4:	4857      	ldr	r0, [pc, #348]	; (8001b44 <HAL_ADC_Start+0x168>)
 80019e6:	f7ff fdeb 	bl	80015c0 <LL_ADC_GetMultimode>
 80019ea:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff fe7c 	bl	80016ee <LL_ADC_REG_IsConversionOngoing>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f040 809c 	bne.w	8001b36 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d101      	bne.n	8001a0c <HAL_ADC_Start+0x30>
 8001a08:	2302      	movs	r3, #2
 8001a0a:	e097      	b.n	8001b3c <HAL_ADC_Start+0x160>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 fc9b 	bl	8002350 <ADC_Enable>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a1e:	7dfb      	ldrb	r3, [r7, #23]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f040 8083 	bne.w	8001b2c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a2a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a2e:	f023 0301 	bic.w	r3, r3, #1
 8001a32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a42      	ldr	r2, [pc, #264]	; (8001b48 <HAL_ADC_Start+0x16c>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d002      	beq.n	8001a4a <HAL_ADC_Start+0x6e>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	e000      	b.n	8001a4c <HAL_ADC_Start+0x70>
 8001a4a:	4b40      	ldr	r3, [pc, #256]	; (8001b4c <HAL_ADC_Start+0x170>)
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d002      	beq.n	8001a5a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d105      	bne.n	8001a66 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a72:	d106      	bne.n	8001a82 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a78:	f023 0206 	bic.w	r2, r3, #6
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	659a      	str	r2, [r3, #88]	; 0x58
 8001a80:	e002      	b.n	8001a88 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	221c      	movs	r2, #28
 8001a8e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a2a      	ldr	r2, [pc, #168]	; (8001b48 <HAL_ADC_Start+0x16c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d002      	beq.n	8001aa8 <HAL_ADC_Start+0xcc>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	e000      	b.n	8001aaa <HAL_ADC_Start+0xce>
 8001aa8:	4b28      	ldr	r3, [pc, #160]	; (8001b4c <HAL_ADC_Start+0x170>)
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6812      	ldr	r2, [r2, #0]
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d008      	beq.n	8001ac4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d005      	beq.n	8001ac4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	2b05      	cmp	r3, #5
 8001abc:	d002      	beq.n	8001ac4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	2b09      	cmp	r3, #9
 8001ac2:	d114      	bne.n	8001aee <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d007      	beq.n	8001ae2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ada:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fded 	bl	80016c6 <LL_ADC_REG_StartConversion>
 8001aec:	e025      	b.n	8001b3a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a12      	ldr	r2, [pc, #72]	; (8001b48 <HAL_ADC_Start+0x16c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d002      	beq.n	8001b0a <HAL_ADC_Start+0x12e>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	e000      	b.n	8001b0c <HAL_ADC_Start+0x130>
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <HAL_ADC_Start+0x170>)
 8001b0c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00f      	beq.n	8001b3a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b22:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	655a      	str	r2, [r3, #84]	; 0x54
 8001b2a:	e006      	b.n	8001b3a <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001b34:	e001      	b.n	8001b3a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b36:	2302      	movs	r3, #2
 8001b38:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	50040300 	.word	0x50040300
 8001b48:	50040100 	.word	0x50040100
 8001b4c:	50040000 	.word	0x50040000

08001b50 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b0b6      	sub	sp, #216	; 0xd8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d101      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x22>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e3c9      	b.n	8002322 <HAL_ADC_ConfigChannel+0x7b6>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff fda7 	bl	80016ee <LL_ADC_REG_IsConversionOngoing>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f040 83aa 	bne.w	80022fc <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b05      	cmp	r3, #5
 8001bb6:	d824      	bhi.n	8001c02 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	3b02      	subs	r3, #2
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d81b      	bhi.n	8001bfa <HAL_ADC_ConfigChannel+0x8e>
 8001bc2:	a201      	add	r2, pc, #4	; (adr r2, 8001bc8 <HAL_ADC_ConfigChannel+0x5c>)
 8001bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc8:	08001bd9 	.word	0x08001bd9
 8001bcc:	08001be1 	.word	0x08001be1
 8001bd0:	08001be9 	.word	0x08001be9
 8001bd4:	08001bf1 	.word	0x08001bf1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001bd8:	230c      	movs	r3, #12
 8001bda:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001bde:	e010      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001be0:	2312      	movs	r3, #18
 8001be2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001be6:	e00c      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001be8:	2318      	movs	r3, #24
 8001bea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001bee:	e008      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001bf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001bf8:	e003      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001bfa:	2306      	movs	r3, #6
 8001bfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001c00:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6818      	ldr	r0, [r3, #0]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001c10:	f7ff fc5b 	bl	80014ca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff fd68 	bl	80016ee <LL_ADC_REG_IsConversionOngoing>
 8001c1e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fd74 	bl	8001714 <LL_ADC_INJ_IsConversionOngoing>
 8001c2c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f040 81a4 	bne.w	8001f82 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f040 819f 	bne.w	8001f82 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6818      	ldr	r0, [r3, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	6819      	ldr	r1, [r3, #0]
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	461a      	mov	r2, r3
 8001c52:	f7ff fc66 	bl	8001522 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	695a      	ldr	r2, [r3, #20]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	08db      	lsrs	r3, r3, #3
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d00a      	beq.n	8001c8e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6818      	ldr	r0, [r3, #0]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	6919      	ldr	r1, [r3, #16]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c88:	f7ff fbca 	bl	8001420 <LL_ADC_SetOffset>
 8001c8c:	e179      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2100      	movs	r1, #0
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff fbe7 	bl	8001468 <LL_ADC_GetOffsetChannel>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10a      	bne.n	8001cba <HAL_ADC_ConfigChannel+0x14e>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2100      	movs	r1, #0
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff fbdc 	bl	8001468 <LL_ADC_GetOffsetChannel>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	0e9b      	lsrs	r3, r3, #26
 8001cb4:	f003 021f 	and.w	r2, r3, #31
 8001cb8:	e01e      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x18c>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff fbd1 	bl	8001468 <LL_ADC_GetOffsetChannel>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ccc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001cd0:	fa93 f3a3 	rbit	r3, r3
 8001cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001cdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ce0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001ce8:	2320      	movs	r3, #32
 8001cea:	e004      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001cec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001cf0:	fab3 f383 	clz	r3, r3
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d105      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x1a4>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	0e9b      	lsrs	r3, r3, #26
 8001d0a:	f003 031f 	and.w	r3, r3, #31
 8001d0e:	e018      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x1d6>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d1c:	fa93 f3a3 	rbit	r3, r3
 8001d20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001d24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001d2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001d34:	2320      	movs	r3, #32
 8001d36:	e004      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001d38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001d3c:	fab3 f383 	clz	r3, r3
 8001d40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d106      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fba0 	bl	8001494 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2101      	movs	r1, #1
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff fb84 	bl	8001468 <LL_ADC_GetOffsetChannel>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10a      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x214>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2101      	movs	r1, #1
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fb79 	bl	8001468 <LL_ADC_GetOffsetChannel>
 8001d76:	4603      	mov	r3, r0
 8001d78:	0e9b      	lsrs	r3, r3, #26
 8001d7a:	f003 021f 	and.w	r2, r3, #31
 8001d7e:	e01e      	b.n	8001dbe <HAL_ADC_ConfigChannel+0x252>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2101      	movs	r1, #1
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fb6e 	bl	8001468 <LL_ADC_GetOffsetChannel>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d96:	fa93 f3a3 	rbit	r3, r3
 8001d9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001d9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001da2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001da6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001dae:	2320      	movs	r3, #32
 8001db0:	e004      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001db2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001db6:	fab3 f383 	clz	r3, r3
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d105      	bne.n	8001dd6 <HAL_ADC_ConfigChannel+0x26a>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	0e9b      	lsrs	r3, r3, #26
 8001dd0:	f003 031f 	and.w	r3, r3, #31
 8001dd4:	e018      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x29c>
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dde:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001de2:	fa93 f3a3 	rbit	r3, r3
 8001de6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001dea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001df2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001dfa:	2320      	movs	r3, #32
 8001dfc:	e004      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001dfe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e02:	fab3 f383 	clz	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d106      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2200      	movs	r2, #0
 8001e12:	2101      	movs	r1, #1
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff fb3d 	bl	8001494 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2102      	movs	r1, #2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff fb21 	bl	8001468 <LL_ADC_GetOffsetChannel>
 8001e26:	4603      	mov	r3, r0
 8001e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10a      	bne.n	8001e46 <HAL_ADC_ConfigChannel+0x2da>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2102      	movs	r1, #2
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff fb16 	bl	8001468 <LL_ADC_GetOffsetChannel>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	0e9b      	lsrs	r3, r3, #26
 8001e40:	f003 021f 	and.w	r2, r3, #31
 8001e44:	e01e      	b.n	8001e84 <HAL_ADC_ConfigChannel+0x318>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2102      	movs	r1, #2
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff fb0b 	bl	8001468 <LL_ADC_GetOffsetChannel>
 8001e52:	4603      	mov	r3, r0
 8001e54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e5c:	fa93 f3a3 	rbit	r3, r3
 8001e60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001e64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001e6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001e74:	2320      	movs	r3, #32
 8001e76:	e004      	b.n	8001e82 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001e78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e7c:	fab3 f383 	clz	r3, r3
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d105      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x330>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	0e9b      	lsrs	r3, r3, #26
 8001e96:	f003 031f 	and.w	r3, r3, #31
 8001e9a:	e014      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x35a>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ea4:	fa93 f3a3 	rbit	r3, r3
 8001ea8:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001eaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001eb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001eb8:	2320      	movs	r3, #32
 8001eba:	e004      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001ebc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ec0:	fab3 f383 	clz	r3, r3
 8001ec4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d106      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2102      	movs	r1, #2
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fade 	bl	8001494 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2103      	movs	r1, #3
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fac2 	bl	8001468 <LL_ADC_GetOffsetChannel>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10a      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x398>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2103      	movs	r1, #3
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fab7 	bl	8001468 <LL_ADC_GetOffsetChannel>
 8001efa:	4603      	mov	r3, r0
 8001efc:	0e9b      	lsrs	r3, r3, #26
 8001efe:	f003 021f 	and.w	r2, r3, #31
 8001f02:	e017      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x3c8>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2103      	movs	r1, #3
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff faac 	bl	8001468 <LL_ADC_GetOffsetChannel>
 8001f10:	4603      	mov	r3, r0
 8001f12:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f16:	fa93 f3a3 	rbit	r3, r3
 8001f1a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f1e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001f20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001f26:	2320      	movs	r3, #32
 8001f28:	e003      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f2c:	fab3 f383 	clz	r3, r3
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d105      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x3e0>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	0e9b      	lsrs	r3, r3, #26
 8001f46:	f003 031f 	and.w	r3, r3, #31
 8001f4a:	e011      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x404>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f54:	fa93 f3a3 	rbit	r3, r3
 8001f58:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001f5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f5c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001f5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001f64:	2320      	movs	r3, #32
 8001f66:	e003      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001f68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d106      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2103      	movs	r1, #3
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff fa89 	bl	8001494 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fb8a 	bl	80016a0 <LL_ADC_IsEnabled>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f040 8140 	bne.w	8002214 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6818      	ldr	r0, [r3, #0]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	6819      	ldr	r1, [r3, #0]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	f7ff fae9 	bl	8001578 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	4a8f      	ldr	r2, [pc, #572]	; (80021e8 <HAL_ADC_ConfigChannel+0x67c>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	f040 8131 	bne.w	8002214 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10b      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x46e>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	0e9b      	lsrs	r3, r3, #26
 8001fc8:	3301      	adds	r3, #1
 8001fca:	f003 031f 	and.w	r3, r3, #31
 8001fce:	2b09      	cmp	r3, #9
 8001fd0:	bf94      	ite	ls
 8001fd2:	2301      	movls	r3, #1
 8001fd4:	2300      	movhi	r3, #0
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	e019      	b.n	800200e <HAL_ADC_ConfigChannel+0x4a2>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fe2:	fa93 f3a3 	rbit	r3, r3
 8001fe6:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001fe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fea:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001fec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001ff2:	2320      	movs	r3, #32
 8001ff4:	e003      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001ff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ff8:	fab3 f383 	clz	r3, r3
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	3301      	adds	r3, #1
 8002000:	f003 031f 	and.w	r3, r3, #31
 8002004:	2b09      	cmp	r3, #9
 8002006:	bf94      	ite	ls
 8002008:	2301      	movls	r3, #1
 800200a:	2300      	movhi	r3, #0
 800200c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800200e:	2b00      	cmp	r3, #0
 8002010:	d079      	beq.n	8002106 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800201a:	2b00      	cmp	r3, #0
 800201c:	d107      	bne.n	800202e <HAL_ADC_ConfigChannel+0x4c2>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	0e9b      	lsrs	r3, r3, #26
 8002024:	3301      	adds	r3, #1
 8002026:	069b      	lsls	r3, r3, #26
 8002028:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800202c:	e015      	b.n	800205a <HAL_ADC_ConfigChannel+0x4ee>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002036:	fa93 f3a3 	rbit	r3, r3
 800203a:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800203c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800203e:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002046:	2320      	movs	r3, #32
 8002048:	e003      	b.n	8002052 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800204a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800204c:	fab3 f383 	clz	r3, r3
 8002050:	b2db      	uxtb	r3, r3
 8002052:	3301      	adds	r3, #1
 8002054:	069b      	lsls	r3, r3, #26
 8002056:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002062:	2b00      	cmp	r3, #0
 8002064:	d109      	bne.n	800207a <HAL_ADC_ConfigChannel+0x50e>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	0e9b      	lsrs	r3, r3, #26
 800206c:	3301      	adds	r3, #1
 800206e:	f003 031f 	and.w	r3, r3, #31
 8002072:	2101      	movs	r1, #1
 8002074:	fa01 f303 	lsl.w	r3, r1, r3
 8002078:	e017      	b.n	80020aa <HAL_ADC_ConfigChannel+0x53e>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002082:	fa93 f3a3 	rbit	r3, r3
 8002086:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800208a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800208c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002092:	2320      	movs	r3, #32
 8002094:	e003      	b.n	800209e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002098:	fab3 f383 	clz	r3, r3
 800209c:	b2db      	uxtb	r3, r3
 800209e:	3301      	adds	r3, #1
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	2101      	movs	r1, #1
 80020a6:	fa01 f303 	lsl.w	r3, r1, r3
 80020aa:	ea42 0103 	orr.w	r1, r2, r3
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10a      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x564>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	0e9b      	lsrs	r3, r3, #26
 80020c0:	3301      	adds	r3, #1
 80020c2:	f003 021f 	and.w	r2, r3, #31
 80020c6:	4613      	mov	r3, r2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4413      	add	r3, r2
 80020cc:	051b      	lsls	r3, r3, #20
 80020ce:	e018      	b.n	8002102 <HAL_ADC_ConfigChannel+0x596>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d8:	fa93 f3a3 	rbit	r3, r3
 80020dc:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80020de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80020e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80020e8:	2320      	movs	r3, #32
 80020ea:	e003      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80020ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	3301      	adds	r3, #1
 80020f6:	f003 021f 	and.w	r2, r3, #31
 80020fa:	4613      	mov	r3, r2
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	4413      	add	r3, r2
 8002100:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002102:	430b      	orrs	r3, r1
 8002104:	e081      	b.n	800220a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800210e:	2b00      	cmp	r3, #0
 8002110:	d107      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x5b6>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	0e9b      	lsrs	r3, r3, #26
 8002118:	3301      	adds	r3, #1
 800211a:	069b      	lsls	r3, r3, #26
 800211c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002120:	e015      	b.n	800214e <HAL_ADC_ConfigChannel+0x5e2>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212a:	fa93 f3a3 	rbit	r3, r3
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800213a:	2320      	movs	r3, #32
 800213c:	e003      	b.n	8002146 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800213e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002140:	fab3 f383 	clz	r3, r3
 8002144:	b2db      	uxtb	r3, r3
 8002146:	3301      	adds	r3, #1
 8002148:	069b      	lsls	r3, r3, #26
 800214a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002156:	2b00      	cmp	r3, #0
 8002158:	d109      	bne.n	800216e <HAL_ADC_ConfigChannel+0x602>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	0e9b      	lsrs	r3, r3, #26
 8002160:	3301      	adds	r3, #1
 8002162:	f003 031f 	and.w	r3, r3, #31
 8002166:	2101      	movs	r1, #1
 8002168:	fa01 f303 	lsl.w	r3, r1, r3
 800216c:	e017      	b.n	800219e <HAL_ADC_ConfigChannel+0x632>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	fa93 f3a3 	rbit	r3, r3
 800217a:	61bb      	str	r3, [r7, #24]
  return result;
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002180:	6a3b      	ldr	r3, [r7, #32]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002186:	2320      	movs	r3, #32
 8002188:	e003      	b.n	8002192 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	fab3 f383 	clz	r3, r3
 8002190:	b2db      	uxtb	r3, r3
 8002192:	3301      	adds	r3, #1
 8002194:	f003 031f 	and.w	r3, r3, #31
 8002198:	2101      	movs	r1, #1
 800219a:	fa01 f303 	lsl.w	r3, r1, r3
 800219e:	ea42 0103 	orr.w	r1, r2, r3
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10d      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x65e>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	0e9b      	lsrs	r3, r3, #26
 80021b4:	3301      	adds	r3, #1
 80021b6:	f003 021f 	and.w	r2, r3, #31
 80021ba:	4613      	mov	r3, r2
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	4413      	add	r3, r2
 80021c0:	3b1e      	subs	r3, #30
 80021c2:	051b      	lsls	r3, r3, #20
 80021c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021c8:	e01e      	b.n	8002208 <HAL_ADC_ConfigChannel+0x69c>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	fa93 f3a3 	rbit	r3, r3
 80021d6:	60fb      	str	r3, [r7, #12]
  return result;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d104      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80021e2:	2320      	movs	r3, #32
 80021e4:	e006      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x688>
 80021e6:	bf00      	nop
 80021e8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	fab3 f383 	clz	r3, r3
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	3301      	adds	r3, #1
 80021f6:	f003 021f 	and.w	r2, r3, #31
 80021fa:	4613      	mov	r3, r2
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	4413      	add	r3, r2
 8002200:	3b1e      	subs	r3, #30
 8002202:	051b      	lsls	r3, r3, #20
 8002204:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002208:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800220e:	4619      	mov	r1, r3
 8002210:	f7ff f987 	bl	8001522 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4b44      	ldr	r3, [pc, #272]	; (800232c <HAL_ADC_ConfigChannel+0x7c0>)
 800221a:	4013      	ands	r3, r2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d07a      	beq.n	8002316 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002220:	4843      	ldr	r0, [pc, #268]	; (8002330 <HAL_ADC_ConfigChannel+0x7c4>)
 8002222:	f7ff f8ef 	bl	8001404 <LL_ADC_GetCommonPathInternalCh>
 8002226:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a41      	ldr	r2, [pc, #260]	; (8002334 <HAL_ADC_ConfigChannel+0x7c8>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d12c      	bne.n	800228e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002234:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002238:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d126      	bne.n	800228e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a3c      	ldr	r2, [pc, #240]	; (8002338 <HAL_ADC_ConfigChannel+0x7cc>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d004      	beq.n	8002254 <HAL_ADC_ConfigChannel+0x6e8>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a3b      	ldr	r2, [pc, #236]	; (800233c <HAL_ADC_ConfigChannel+0x7d0>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d15d      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002254:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002258:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800225c:	4619      	mov	r1, r3
 800225e:	4834      	ldr	r0, [pc, #208]	; (8002330 <HAL_ADC_ConfigChannel+0x7c4>)
 8002260:	f7ff f8bd 	bl	80013de <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002264:	4b36      	ldr	r3, [pc, #216]	; (8002340 <HAL_ADC_ConfigChannel+0x7d4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	099b      	lsrs	r3, r3, #6
 800226a:	4a36      	ldr	r2, [pc, #216]	; (8002344 <HAL_ADC_ConfigChannel+0x7d8>)
 800226c:	fba2 2303 	umull	r2, r3, r2, r3
 8002270:	099b      	lsrs	r3, r3, #6
 8002272:	1c5a      	adds	r2, r3, #1
 8002274:	4613      	mov	r3, r2
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	4413      	add	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800227e:	e002      	b.n	8002286 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	3b01      	subs	r3, #1
 8002284:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1f9      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800228c:	e040      	b.n	8002310 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a2d      	ldr	r2, [pc, #180]	; (8002348 <HAL_ADC_ConfigChannel+0x7dc>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d118      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002298:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800229c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d112      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a23      	ldr	r2, [pc, #140]	; (8002338 <HAL_ADC_ConfigChannel+0x7cc>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d004      	beq.n	80022b8 <HAL_ADC_ConfigChannel+0x74c>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a22      	ldr	r2, [pc, #136]	; (800233c <HAL_ADC_ConfigChannel+0x7d0>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d12d      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022c0:	4619      	mov	r1, r3
 80022c2:	481b      	ldr	r0, [pc, #108]	; (8002330 <HAL_ADC_ConfigChannel+0x7c4>)
 80022c4:	f7ff f88b 	bl	80013de <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022c8:	e024      	b.n	8002314 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a1f      	ldr	r2, [pc, #124]	; (800234c <HAL_ADC_ConfigChannel+0x7e0>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d120      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d11a      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a14      	ldr	r2, [pc, #80]	; (8002338 <HAL_ADC_ConfigChannel+0x7cc>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d115      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022f2:	4619      	mov	r1, r3
 80022f4:	480e      	ldr	r0, [pc, #56]	; (8002330 <HAL_ADC_ConfigChannel+0x7c4>)
 80022f6:	f7ff f872 	bl	80013de <LL_ADC_SetCommonPathInternalCh>
 80022fa:	e00c      	b.n	8002316 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002300:	f043 0220 	orr.w	r2, r3, #32
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800230e:	e002      	b.n	8002316 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002310:	bf00      	nop
 8002312:	e000      	b.n	8002316 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002314:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800231e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002322:	4618      	mov	r0, r3
 8002324:	37d8      	adds	r7, #216	; 0xd8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	80080000 	.word	0x80080000
 8002330:	50040300 	.word	0x50040300
 8002334:	c7520000 	.word	0xc7520000
 8002338:	50040000 	.word	0x50040000
 800233c:	50040200 	.word	0x50040200
 8002340:	20000004 	.word	0x20000004
 8002344:	053e2d63 	.word	0x053e2d63
 8002348:	cb840000 	.word	0xcb840000
 800234c:	80000001 	.word	0x80000001

08002350 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002358:	2300      	movs	r3, #0
 800235a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff f99d 	bl	80016a0 <LL_ADC_IsEnabled>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d169      	bne.n	8002440 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	4b36      	ldr	r3, [pc, #216]	; (800244c <ADC_Enable+0xfc>)
 8002374:	4013      	ands	r3, r2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00d      	beq.n	8002396 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237e:	f043 0210 	orr.w	r2, r3, #16
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238a:	f043 0201 	orr.w	r2, r3, #1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e055      	b.n	8002442 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff f96c 	bl	8001678 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80023a0:	482b      	ldr	r0, [pc, #172]	; (8002450 <ADC_Enable+0x100>)
 80023a2:	f7ff f82f 	bl	8001404 <LL_ADC_GetCommonPathInternalCh>
 80023a6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80023a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d013      	beq.n	80023d8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023b0:	4b28      	ldr	r3, [pc, #160]	; (8002454 <ADC_Enable+0x104>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	099b      	lsrs	r3, r3, #6
 80023b6:	4a28      	ldr	r2, [pc, #160]	; (8002458 <ADC_Enable+0x108>)
 80023b8:	fba2 2303 	umull	r2, r3, r2, r3
 80023bc:	099b      	lsrs	r3, r3, #6
 80023be:	1c5a      	adds	r2, r3, #1
 80023c0:	4613      	mov	r3, r2
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	4413      	add	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80023ca:	e002      	b.n	80023d2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1f9      	bne.n	80023cc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80023d8:	f7fe ffbe 	bl	8001358 <HAL_GetTick>
 80023dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023de:	e028      	b.n	8002432 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff f95b 	bl	80016a0 <LL_ADC_IsEnabled>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d104      	bne.n	80023fa <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff f93f 	bl	8001678 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023fa:	f7fe ffad 	bl	8001358 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d914      	bls.n	8002432 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b01      	cmp	r3, #1
 8002414:	d00d      	beq.n	8002432 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241a:	f043 0210 	orr.w	r2, r3, #16
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002426:	f043 0201 	orr.w	r2, r3, #1
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e007      	b.n	8002442 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b01      	cmp	r3, #1
 800243e:	d1cf      	bne.n	80023e0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	8000003f 	.word	0x8000003f
 8002450:	50040300 	.word	0x50040300
 8002454:	20000004 	.word	0x20000004
 8002458:	053e2d63 	.word	0x053e2d63

0800245c <LL_ADC_IsEnabled>:
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <LL_ADC_IsEnabled+0x18>
 8002470:	2301      	movs	r3, #1
 8002472:	e000      	b.n	8002476 <LL_ADC_IsEnabled+0x1a>
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <LL_ADC_REG_IsConversionOngoing>:
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 0304 	and.w	r3, r3, #4
 8002492:	2b04      	cmp	r3, #4
 8002494:	d101      	bne.n	800249a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80024a8:	b590      	push	{r4, r7, lr}
 80024aa:	b09f      	sub	sp, #124	; 0x7c
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e093      	b.n	80025ee <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80024ce:	2300      	movs	r3, #0
 80024d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80024d2:	2300      	movs	r3, #0
 80024d4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a47      	ldr	r2, [pc, #284]	; (80025f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d102      	bne.n	80024e6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80024e0:	4b46      	ldr	r3, [pc, #280]	; (80025fc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	e001      	b.n	80024ea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80024e6:	2300      	movs	r3, #0
 80024e8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10b      	bne.n	8002508 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f4:	f043 0220 	orr.w	r2, r3, #32
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e072      	b.n	80025ee <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff ffb9 	bl	8002482 <LL_ADC_REG_IsConversionOngoing>
 8002510:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff ffb3 	bl	8002482 <LL_ADC_REG_IsConversionOngoing>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d154      	bne.n	80025cc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002522:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002524:	2b00      	cmp	r3, #0
 8002526:	d151      	bne.n	80025cc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002528:	4b35      	ldr	r3, [pc, #212]	; (8002600 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800252a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d02c      	beq.n	800258e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	6859      	ldr	r1, [r3, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002546:	035b      	lsls	r3, r3, #13
 8002548:	430b      	orrs	r3, r1
 800254a:	431a      	orrs	r2, r3
 800254c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800254e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002550:	4829      	ldr	r0, [pc, #164]	; (80025f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002552:	f7ff ff83 	bl	800245c <LL_ADC_IsEnabled>
 8002556:	4604      	mov	r4, r0
 8002558:	4828      	ldr	r0, [pc, #160]	; (80025fc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800255a:	f7ff ff7f 	bl	800245c <LL_ADC_IsEnabled>
 800255e:	4603      	mov	r3, r0
 8002560:	431c      	orrs	r4, r3
 8002562:	4828      	ldr	r0, [pc, #160]	; (8002604 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002564:	f7ff ff7a 	bl	800245c <LL_ADC_IsEnabled>
 8002568:	4603      	mov	r3, r0
 800256a:	4323      	orrs	r3, r4
 800256c:	2b00      	cmp	r3, #0
 800256e:	d137      	bne.n	80025e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002578:	f023 030f 	bic.w	r3, r3, #15
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	6811      	ldr	r1, [r2, #0]
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	6892      	ldr	r2, [r2, #8]
 8002584:	430a      	orrs	r2, r1
 8002586:	431a      	orrs	r2, r3
 8002588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800258a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800258c:	e028      	b.n	80025e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800258e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002598:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800259a:	4817      	ldr	r0, [pc, #92]	; (80025f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800259c:	f7ff ff5e 	bl	800245c <LL_ADC_IsEnabled>
 80025a0:	4604      	mov	r4, r0
 80025a2:	4816      	ldr	r0, [pc, #88]	; (80025fc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80025a4:	f7ff ff5a 	bl	800245c <LL_ADC_IsEnabled>
 80025a8:	4603      	mov	r3, r0
 80025aa:	431c      	orrs	r4, r3
 80025ac:	4815      	ldr	r0, [pc, #84]	; (8002604 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80025ae:	f7ff ff55 	bl	800245c <LL_ADC_IsEnabled>
 80025b2:	4603      	mov	r3, r0
 80025b4:	4323      	orrs	r3, r4
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d112      	bne.n	80025e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80025ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80025c2:	f023 030f 	bic.w	r3, r3, #15
 80025c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80025c8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025ca:	e009      	b.n	80025e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d0:	f043 0220 	orr.w	r2, r3, #32
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80025de:	e000      	b.n	80025e2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80025ea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	377c      	adds	r7, #124	; 0x7c
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd90      	pop	{r4, r7, pc}
 80025f6:	bf00      	nop
 80025f8:	50040000 	.word	0x50040000
 80025fc:	50040100 	.word	0x50040100
 8002600:	50040300 	.word	0x50040300
 8002604:	50040200 	.word	0x50040200

08002608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002618:	4b0c      	ldr	r3, [pc, #48]	; (800264c <__NVIC_SetPriorityGrouping+0x44>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002624:	4013      	ands	r3, r2
 8002626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800263a:	4a04      	ldr	r2, [pc, #16]	; (800264c <__NVIC_SetPriorityGrouping+0x44>)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	60d3      	str	r3, [r2, #12]
}
 8002640:	bf00      	nop
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002654:	4b04      	ldr	r3, [pc, #16]	; (8002668 <__NVIC_GetPriorityGrouping+0x18>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	0a1b      	lsrs	r3, r3, #8
 800265a:	f003 0307 	and.w	r3, r3, #7
}
 800265e:	4618      	mov	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267a:	2b00      	cmp	r3, #0
 800267c:	db0b      	blt.n	8002696 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	f003 021f 	and.w	r2, r3, #31
 8002684:	4907      	ldr	r1, [pc, #28]	; (80026a4 <__NVIC_EnableIRQ+0x38>)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	2001      	movs	r0, #1
 800268e:	fa00 f202 	lsl.w	r2, r0, r2
 8002692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	e000e100 	.word	0xe000e100

080026a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	6039      	str	r1, [r7, #0]
 80026b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	db0a      	blt.n	80026d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	490c      	ldr	r1, [pc, #48]	; (80026f4 <__NVIC_SetPriority+0x4c>)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	0112      	lsls	r2, r2, #4
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	440b      	add	r3, r1
 80026cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026d0:	e00a      	b.n	80026e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	4908      	ldr	r1, [pc, #32]	; (80026f8 <__NVIC_SetPriority+0x50>)
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	3b04      	subs	r3, #4
 80026e0:	0112      	lsls	r2, r2, #4
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	440b      	add	r3, r1
 80026e6:	761a      	strb	r2, [r3, #24]
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	e000e100 	.word	0xe000e100
 80026f8:	e000ed00 	.word	0xe000ed00

080026fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b089      	sub	sp, #36	; 0x24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f1c3 0307 	rsb	r3, r3, #7
 8002716:	2b04      	cmp	r3, #4
 8002718:	bf28      	it	cs
 800271a:	2304      	movcs	r3, #4
 800271c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3304      	adds	r3, #4
 8002722:	2b06      	cmp	r3, #6
 8002724:	d902      	bls.n	800272c <NVIC_EncodePriority+0x30>
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	3b03      	subs	r3, #3
 800272a:	e000      	b.n	800272e <NVIC_EncodePriority+0x32>
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002730:	f04f 32ff 	mov.w	r2, #4294967295
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43da      	mvns	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	401a      	ands	r2, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002744:	f04f 31ff 	mov.w	r1, #4294967295
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	fa01 f303 	lsl.w	r3, r1, r3
 800274e:	43d9      	mvns	r1, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002754:	4313      	orrs	r3, r2
         );
}
 8002756:	4618      	mov	r0, r3
 8002758:	3724      	adds	r7, #36	; 0x24
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
	...

08002764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3b01      	subs	r3, #1
 8002770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002774:	d301      	bcc.n	800277a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002776:	2301      	movs	r3, #1
 8002778:	e00f      	b.n	800279a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800277a:	4a0a      	ldr	r2, [pc, #40]	; (80027a4 <SysTick_Config+0x40>)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3b01      	subs	r3, #1
 8002780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002782:	210f      	movs	r1, #15
 8002784:	f04f 30ff 	mov.w	r0, #4294967295
 8002788:	f7ff ff8e 	bl	80026a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800278c:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <SysTick_Config+0x40>)
 800278e:	2200      	movs	r2, #0
 8002790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002792:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <SysTick_Config+0x40>)
 8002794:	2207      	movs	r2, #7
 8002796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	e000e010 	.word	0xe000e010

080027a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff ff29 	bl	8002608 <__NVIC_SetPriorityGrouping>
}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b086      	sub	sp, #24
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	4603      	mov	r3, r0
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	607a      	str	r2, [r7, #4]
 80027ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027d0:	f7ff ff3e 	bl	8002650 <__NVIC_GetPriorityGrouping>
 80027d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	68b9      	ldr	r1, [r7, #8]
 80027da:	6978      	ldr	r0, [r7, #20]
 80027dc:	f7ff ff8e 	bl	80026fc <NVIC_EncodePriority>
 80027e0:	4602      	mov	r2, r0
 80027e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e6:	4611      	mov	r1, r2
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff5d 	bl	80026a8 <__NVIC_SetPriority>
}
 80027ee:	bf00      	nop
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	4603      	mov	r3, r0
 80027fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff ff31 	bl	800266c <__NVIC_EnableIRQ>
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7ff ffa2 	bl	8002764 <SysTick_Config>
 8002820:	4603      	mov	r3, r0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800282c:	b480      	push	{r7}
 800282e:	b087      	sub	sp, #28
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800283a:	e17f      	b.n	8002b3c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	2101      	movs	r1, #1
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	fa01 f303 	lsl.w	r3, r1, r3
 8002848:	4013      	ands	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 8171 	beq.w	8002b36 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 0303 	and.w	r3, r3, #3
 800285c:	2b01      	cmp	r3, #1
 800285e:	d005      	beq.n	800286c <HAL_GPIO_Init+0x40>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 0303 	and.w	r3, r3, #3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d130      	bne.n	80028ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	2203      	movs	r2, #3
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	4013      	ands	r3, r2
 8002882:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028a2:	2201      	movs	r2, #1
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43db      	mvns	r3, r3
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4013      	ands	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	091b      	lsrs	r3, r3, #4
 80028b8:	f003 0201 	and.w	r2, r3, #1
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d118      	bne.n	800290c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80028e0:	2201      	movs	r2, #1
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4013      	ands	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	08db      	lsrs	r3, r3, #3
 80028f6:	f003 0201 	and.w	r2, r3, #1
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	2b03      	cmp	r3, #3
 8002916:	d017      	beq.n	8002948 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	2203      	movs	r2, #3
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4313      	orrs	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d123      	bne.n	800299c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	08da      	lsrs	r2, r3, #3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3208      	adds	r2, #8
 800295c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002960:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	220f      	movs	r2, #15
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4013      	ands	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	691a      	ldr	r2, [r3, #16]
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	4313      	orrs	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	08da      	lsrs	r2, r3, #3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	3208      	adds	r2, #8
 8002996:	6939      	ldr	r1, [r7, #16]
 8002998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	2203      	movs	r2, #3
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4013      	ands	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 0203 	and.w	r2, r3, #3
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 80ac 	beq.w	8002b36 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029de:	4b5f      	ldr	r3, [pc, #380]	; (8002b5c <HAL_GPIO_Init+0x330>)
 80029e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029e2:	4a5e      	ldr	r2, [pc, #376]	; (8002b5c <HAL_GPIO_Init+0x330>)
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	6613      	str	r3, [r2, #96]	; 0x60
 80029ea:	4b5c      	ldr	r3, [pc, #368]	; (8002b5c <HAL_GPIO_Init+0x330>)
 80029ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029f6:	4a5a      	ldr	r2, [pc, #360]	; (8002b60 <HAL_GPIO_Init+0x334>)
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	089b      	lsrs	r3, r3, #2
 80029fc:	3302      	adds	r3, #2
 80029fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a02:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	220f      	movs	r2, #15
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	4013      	ands	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a20:	d025      	beq.n	8002a6e <HAL_GPIO_Init+0x242>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a4f      	ldr	r2, [pc, #316]	; (8002b64 <HAL_GPIO_Init+0x338>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d01f      	beq.n	8002a6a <HAL_GPIO_Init+0x23e>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a4e      	ldr	r2, [pc, #312]	; (8002b68 <HAL_GPIO_Init+0x33c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d019      	beq.n	8002a66 <HAL_GPIO_Init+0x23a>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a4d      	ldr	r2, [pc, #308]	; (8002b6c <HAL_GPIO_Init+0x340>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d013      	beq.n	8002a62 <HAL_GPIO_Init+0x236>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a4c      	ldr	r2, [pc, #304]	; (8002b70 <HAL_GPIO_Init+0x344>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d00d      	beq.n	8002a5e <HAL_GPIO_Init+0x232>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a4b      	ldr	r2, [pc, #300]	; (8002b74 <HAL_GPIO_Init+0x348>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d007      	beq.n	8002a5a <HAL_GPIO_Init+0x22e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a4a      	ldr	r2, [pc, #296]	; (8002b78 <HAL_GPIO_Init+0x34c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d101      	bne.n	8002a56 <HAL_GPIO_Init+0x22a>
 8002a52:	2306      	movs	r3, #6
 8002a54:	e00c      	b.n	8002a70 <HAL_GPIO_Init+0x244>
 8002a56:	2307      	movs	r3, #7
 8002a58:	e00a      	b.n	8002a70 <HAL_GPIO_Init+0x244>
 8002a5a:	2305      	movs	r3, #5
 8002a5c:	e008      	b.n	8002a70 <HAL_GPIO_Init+0x244>
 8002a5e:	2304      	movs	r3, #4
 8002a60:	e006      	b.n	8002a70 <HAL_GPIO_Init+0x244>
 8002a62:	2303      	movs	r3, #3
 8002a64:	e004      	b.n	8002a70 <HAL_GPIO_Init+0x244>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e002      	b.n	8002a70 <HAL_GPIO_Init+0x244>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <HAL_GPIO_Init+0x244>
 8002a6e:	2300      	movs	r3, #0
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	f002 0203 	and.w	r2, r2, #3
 8002a76:	0092      	lsls	r2, r2, #2
 8002a78:	4093      	lsls	r3, r2
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a80:	4937      	ldr	r1, [pc, #220]	; (8002b60 <HAL_GPIO_Init+0x334>)
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	089b      	lsrs	r3, r3, #2
 8002a86:	3302      	adds	r3, #2
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a8e:	4b3b      	ldr	r3, [pc, #236]	; (8002b7c <HAL_GPIO_Init+0x350>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	43db      	mvns	r3, r3
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ab2:	4a32      	ldr	r2, [pc, #200]	; (8002b7c <HAL_GPIO_Init+0x350>)
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ab8:	4b30      	ldr	r3, [pc, #192]	; (8002b7c <HAL_GPIO_Init+0x350>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002adc:	4a27      	ldr	r2, [pc, #156]	; (8002b7c <HAL_GPIO_Init+0x350>)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ae2:	4b26      	ldr	r3, [pc, #152]	; (8002b7c <HAL_GPIO_Init+0x350>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	43db      	mvns	r3, r3
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4013      	ands	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b06:	4a1d      	ldr	r2, [pc, #116]	; (8002b7c <HAL_GPIO_Init+0x350>)
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b0c:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <HAL_GPIO_Init+0x350>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	43db      	mvns	r3, r3
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b30:	4a12      	ldr	r2, [pc, #72]	; (8002b7c <HAL_GPIO_Init+0x350>)
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	fa22 f303 	lsr.w	r3, r2, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f47f ae78 	bne.w	800283c <HAL_GPIO_Init+0x10>
  }
}
 8002b4c:	bf00      	nop
 8002b4e:	bf00      	nop
 8002b50:	371c      	adds	r7, #28
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	40010000 	.word	0x40010000
 8002b64:	48000400 	.word	0x48000400
 8002b68:	48000800 	.word	0x48000800
 8002b6c:	48000c00 	.word	0x48000c00
 8002b70:	48001000 	.word	0x48001000
 8002b74:	48001400 	.word	0x48001400
 8002b78:	48001800 	.word	0x48001800
 8002b7c:	40010400 	.word	0x40010400

08002b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	807b      	strh	r3, [r7, #2]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b90:	787b      	ldrb	r3, [r7, #1]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b96:	887a      	ldrh	r2, [r7, #2]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b9c:	e002      	b.n	8002ba4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b9e:	887a      	ldrh	r2, [r7, #2]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002bb4:	4b04      	ldr	r3, [pc, #16]	; (8002bc8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40007000 	.word	0x40007000

08002bcc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bda:	d130      	bne.n	8002c3e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bdc:	4b23      	ldr	r3, [pc, #140]	; (8002c6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002be8:	d038      	beq.n	8002c5c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bea:	4b20      	ldr	r3, [pc, #128]	; (8002c6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bf2:	4a1e      	ldr	r2, [pc, #120]	; (8002c6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bf4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bf8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bfa:	4b1d      	ldr	r3, [pc, #116]	; (8002c70 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2232      	movs	r2, #50	; 0x32
 8002c00:	fb02 f303 	mul.w	r3, r2, r3
 8002c04:	4a1b      	ldr	r2, [pc, #108]	; (8002c74 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c06:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0a:	0c9b      	lsrs	r3, r3, #18
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c10:	e002      	b.n	8002c18 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	3b01      	subs	r3, #1
 8002c16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c18:	4b14      	ldr	r3, [pc, #80]	; (8002c6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c24:	d102      	bne.n	8002c2c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1f2      	bne.n	8002c12 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c2c:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c38:	d110      	bne.n	8002c5c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e00f      	b.n	8002c5e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c3e:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c4a:	d007      	beq.n	8002c5c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c4c:	4b07      	ldr	r3, [pc, #28]	; (8002c6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c54:	4a05      	ldr	r2, [pc, #20]	; (8002c6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c5a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	40007000 	.word	0x40007000
 8002c70:	20000004 	.word	0x20000004
 8002c74:	431bde83 	.word	0x431bde83

08002c78 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b088      	sub	sp, #32
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e3ca      	b.n	8003420 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c8a:	4b97      	ldr	r3, [pc, #604]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
 8002c92:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c94:	4b94      	ldr	r3, [pc, #592]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0310 	and.w	r3, r3, #16
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 80e4 	beq.w	8002e74 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d007      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x4a>
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	2b0c      	cmp	r3, #12
 8002cb6:	f040 808b 	bne.w	8002dd0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	f040 8087 	bne.w	8002dd0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cc2:	4b89      	ldr	r3, [pc, #548]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d005      	beq.n	8002cda <HAL_RCC_OscConfig+0x62>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e3a2      	b.n	8003420 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1a      	ldr	r2, [r3, #32]
 8002cde:	4b82      	ldr	r3, [pc, #520]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d004      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x7c>
 8002cea:	4b7f      	ldr	r3, [pc, #508]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cf2:	e005      	b.n	8002d00 <HAL_RCC_OscConfig+0x88>
 8002cf4:	4b7c      	ldr	r3, [pc, #496]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cfa:	091b      	lsrs	r3, r3, #4
 8002cfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d223      	bcs.n	8002d4c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f000 fd1d 	bl	8003748 <RCC_SetFlashLatencyFromMSIRange>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e383      	b.n	8003420 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d18:	4b73      	ldr	r3, [pc, #460]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a72      	ldr	r2, [pc, #456]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002d1e:	f043 0308 	orr.w	r3, r3, #8
 8002d22:	6013      	str	r3, [r2, #0]
 8002d24:	4b70      	ldr	r3, [pc, #448]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	496d      	ldr	r1, [pc, #436]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d36:	4b6c      	ldr	r3, [pc, #432]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	021b      	lsls	r3, r3, #8
 8002d44:	4968      	ldr	r1, [pc, #416]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	604b      	str	r3, [r1, #4]
 8002d4a:	e025      	b.n	8002d98 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d4c:	4b66      	ldr	r3, [pc, #408]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a65      	ldr	r2, [pc, #404]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002d52:	f043 0308 	orr.w	r3, r3, #8
 8002d56:	6013      	str	r3, [r2, #0]
 8002d58:	4b63      	ldr	r3, [pc, #396]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	4960      	ldr	r1, [pc, #384]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d6a:	4b5f      	ldr	r3, [pc, #380]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	021b      	lsls	r3, r3, #8
 8002d78:	495b      	ldr	r1, [pc, #364]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d109      	bne.n	8002d98 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 fcdd 	bl	8003748 <RCC_SetFlashLatencyFromMSIRange>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e343      	b.n	8003420 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d98:	f000 fc4a 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	4b52      	ldr	r3, [pc, #328]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	091b      	lsrs	r3, r3, #4
 8002da4:	f003 030f 	and.w	r3, r3, #15
 8002da8:	4950      	ldr	r1, [pc, #320]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002daa:	5ccb      	ldrb	r3, [r1, r3]
 8002dac:	f003 031f 	and.w	r3, r3, #31
 8002db0:	fa22 f303 	lsr.w	r3, r2, r3
 8002db4:	4a4e      	ldr	r2, [pc, #312]	; (8002ef0 <HAL_RCC_OscConfig+0x278>)
 8002db6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002db8:	4b4e      	ldr	r3, [pc, #312]	; (8002ef4 <HAL_RCC_OscConfig+0x27c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fe fa7b 	bl	80012b8 <HAL_InitTick>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d052      	beq.n	8002e72 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
 8002dce:	e327      	b.n	8003420 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d032      	beq.n	8002e3e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002dd8:	4b43      	ldr	r3, [pc, #268]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a42      	ldr	r2, [pc, #264]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002de4:	f7fe fab8 	bl	8001358 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dec:	f7fe fab4 	bl	8001358 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e310      	b.n	8003420 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dfe:	4b3a      	ldr	r3, [pc, #232]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f0      	beq.n	8002dec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e0a:	4b37      	ldr	r3, [pc, #220]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a36      	ldr	r2, [pc, #216]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002e10:	f043 0308 	orr.w	r3, r3, #8
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	4b34      	ldr	r3, [pc, #208]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	4931      	ldr	r1, [pc, #196]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e28:	4b2f      	ldr	r3, [pc, #188]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	021b      	lsls	r3, r3, #8
 8002e36:	492c      	ldr	r1, [pc, #176]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	604b      	str	r3, [r1, #4]
 8002e3c:	e01a      	b.n	8002e74 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e3e:	4b2a      	ldr	r3, [pc, #168]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a29      	ldr	r2, [pc, #164]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002e44:	f023 0301 	bic.w	r3, r3, #1
 8002e48:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e4a:	f7fe fa85 	bl	8001358 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e52:	f7fe fa81 	bl	8001358 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e2dd      	b.n	8003420 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e64:	4b20      	ldr	r3, [pc, #128]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1f0      	bne.n	8002e52 <HAL_RCC_OscConfig+0x1da>
 8002e70:	e000      	b.n	8002e74 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e72:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d074      	beq.n	8002f6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d005      	beq.n	8002e92 <HAL_RCC_OscConfig+0x21a>
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	2b0c      	cmp	r3, #12
 8002e8a:	d10e      	bne.n	8002eaa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	2b03      	cmp	r3, #3
 8002e90:	d10b      	bne.n	8002eaa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e92:	4b15      	ldr	r3, [pc, #84]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d064      	beq.n	8002f68 <HAL_RCC_OscConfig+0x2f0>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d160      	bne.n	8002f68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e2ba      	b.n	8003420 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb2:	d106      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x24a>
 8002eb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a0b      	ldr	r2, [pc, #44]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002eba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ebe:	6013      	str	r3, [r2, #0]
 8002ec0:	e026      	b.n	8002f10 <HAL_RCC_OscConfig+0x298>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eca:	d115      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x280>
 8002ecc:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a05      	ldr	r2, [pc, #20]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002ed2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a02      	ldr	r2, [pc, #8]	; (8002ee8 <HAL_RCC_OscConfig+0x270>)
 8002ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	e014      	b.n	8002f10 <HAL_RCC_OscConfig+0x298>
 8002ee6:	bf00      	nop
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	08004e3c 	.word	0x08004e3c
 8002ef0:	20000004 	.word	0x20000004
 8002ef4:	20000008 	.word	0x20000008
 8002ef8:	4ba0      	ldr	r3, [pc, #640]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a9f      	ldr	r2, [pc, #636]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8002efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f02:	6013      	str	r3, [r2, #0]
 8002f04:	4b9d      	ldr	r3, [pc, #628]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a9c      	ldr	r2, [pc, #624]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8002f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d013      	beq.n	8002f40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f18:	f7fe fa1e 	bl	8001358 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f20:	f7fe fa1a 	bl	8001358 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b64      	cmp	r3, #100	; 0x64
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e276      	b.n	8003420 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f32:	4b92      	ldr	r3, [pc, #584]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0f0      	beq.n	8002f20 <HAL_RCC_OscConfig+0x2a8>
 8002f3e:	e014      	b.n	8002f6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f40:	f7fe fa0a 	bl	8001358 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f48:	f7fe fa06 	bl	8001358 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b64      	cmp	r3, #100	; 0x64
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e262      	b.n	8003420 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f5a:	4b88      	ldr	r3, [pc, #544]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0x2d0>
 8002f66:	e000      	b.n	8002f6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d060      	beq.n	8003038 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	2b04      	cmp	r3, #4
 8002f7a:	d005      	beq.n	8002f88 <HAL_RCC_OscConfig+0x310>
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	2b0c      	cmp	r3, #12
 8002f80:	d119      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d116      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f88:	4b7c      	ldr	r3, [pc, #496]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x328>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e23f      	b.n	8003420 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa0:	4b76      	ldr	r3, [pc, #472]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	061b      	lsls	r3, r3, #24
 8002fae:	4973      	ldr	r1, [pc, #460]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fb4:	e040      	b.n	8003038 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d023      	beq.n	8003006 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fbe:	4b6f      	ldr	r3, [pc, #444]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a6e      	ldr	r2, [pc, #440]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8002fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fca:	f7fe f9c5 	bl	8001358 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fd2:	f7fe f9c1 	bl	8001358 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e21d      	b.n	8003420 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fe4:	4b65      	ldr	r3, [pc, #404]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f0      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff0:	4b62      	ldr	r3, [pc, #392]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	061b      	lsls	r3, r3, #24
 8002ffe:	495f      	ldr	r1, [pc, #380]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8003000:	4313      	orrs	r3, r2
 8003002:	604b      	str	r3, [r1, #4]
 8003004:	e018      	b.n	8003038 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003006:	4b5d      	ldr	r3, [pc, #372]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a5c      	ldr	r2, [pc, #368]	; (800317c <HAL_RCC_OscConfig+0x504>)
 800300c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003010:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003012:	f7fe f9a1 	bl	8001358 <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800301a:	f7fe f99d 	bl	8001358 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e1f9      	b.n	8003420 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800302c:	4b53      	ldr	r3, [pc, #332]	; (800317c <HAL_RCC_OscConfig+0x504>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1f0      	bne.n	800301a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	2b00      	cmp	r3, #0
 8003042:	d03c      	beq.n	80030be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d01c      	beq.n	8003086 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800304c:	4b4b      	ldr	r3, [pc, #300]	; (800317c <HAL_RCC_OscConfig+0x504>)
 800304e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003052:	4a4a      	ldr	r2, [pc, #296]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305c:	f7fe f97c 	bl	8001358 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003064:	f7fe f978 	bl	8001358 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e1d4      	b.n	8003420 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003076:	4b41      	ldr	r3, [pc, #260]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8003078:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0ef      	beq.n	8003064 <HAL_RCC_OscConfig+0x3ec>
 8003084:	e01b      	b.n	80030be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003086:	4b3d      	ldr	r3, [pc, #244]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8003088:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800308c:	4a3b      	ldr	r2, [pc, #236]	; (800317c <HAL_RCC_OscConfig+0x504>)
 800308e:	f023 0301 	bic.w	r3, r3, #1
 8003092:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003096:	f7fe f95f 	bl	8001358 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800309e:	f7fe f95b 	bl	8001358 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e1b7      	b.n	8003420 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030b0:	4b32      	ldr	r3, [pc, #200]	; (800317c <HAL_RCC_OscConfig+0x504>)
 80030b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1ef      	bne.n	800309e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 80a6 	beq.w	8003218 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030cc:	2300      	movs	r3, #0
 80030ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030d0:	4b2a      	ldr	r3, [pc, #168]	; (800317c <HAL_RCC_OscConfig+0x504>)
 80030d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10d      	bne.n	80030f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030dc:	4b27      	ldr	r3, [pc, #156]	; (800317c <HAL_RCC_OscConfig+0x504>)
 80030de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e0:	4a26      	ldr	r2, [pc, #152]	; (800317c <HAL_RCC_OscConfig+0x504>)
 80030e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e6:	6593      	str	r3, [r2, #88]	; 0x58
 80030e8:	4b24      	ldr	r3, [pc, #144]	; (800317c <HAL_RCC_OscConfig+0x504>)
 80030ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f0:	60bb      	str	r3, [r7, #8]
 80030f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030f4:	2301      	movs	r3, #1
 80030f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030f8:	4b21      	ldr	r3, [pc, #132]	; (8003180 <HAL_RCC_OscConfig+0x508>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003100:	2b00      	cmp	r3, #0
 8003102:	d118      	bne.n	8003136 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003104:	4b1e      	ldr	r3, [pc, #120]	; (8003180 <HAL_RCC_OscConfig+0x508>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a1d      	ldr	r2, [pc, #116]	; (8003180 <HAL_RCC_OscConfig+0x508>)
 800310a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003110:	f7fe f922 	bl	8001358 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003118:	f7fe f91e 	bl	8001358 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e17a      	b.n	8003420 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800312a:	4b15      	ldr	r3, [pc, #84]	; (8003180 <HAL_RCC_OscConfig+0x508>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f0      	beq.n	8003118 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d108      	bne.n	8003150 <HAL_RCC_OscConfig+0x4d8>
 800313e:	4b0f      	ldr	r3, [pc, #60]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8003140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003144:	4a0d      	ldr	r2, [pc, #52]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800314e:	e029      	b.n	80031a4 <HAL_RCC_OscConfig+0x52c>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b05      	cmp	r3, #5
 8003156:	d115      	bne.n	8003184 <HAL_RCC_OscConfig+0x50c>
 8003158:	4b08      	ldr	r3, [pc, #32]	; (800317c <HAL_RCC_OscConfig+0x504>)
 800315a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315e:	4a07      	ldr	r2, [pc, #28]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8003160:	f043 0304 	orr.w	r3, r3, #4
 8003164:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003168:	4b04      	ldr	r3, [pc, #16]	; (800317c <HAL_RCC_OscConfig+0x504>)
 800316a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316e:	4a03      	ldr	r2, [pc, #12]	; (800317c <HAL_RCC_OscConfig+0x504>)
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003178:	e014      	b.n	80031a4 <HAL_RCC_OscConfig+0x52c>
 800317a:	bf00      	nop
 800317c:	40021000 	.word	0x40021000
 8003180:	40007000 	.word	0x40007000
 8003184:	4b9c      	ldr	r3, [pc, #624]	; (80033f8 <HAL_RCC_OscConfig+0x780>)
 8003186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318a:	4a9b      	ldr	r2, [pc, #620]	; (80033f8 <HAL_RCC_OscConfig+0x780>)
 800318c:	f023 0301 	bic.w	r3, r3, #1
 8003190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003194:	4b98      	ldr	r3, [pc, #608]	; (80033f8 <HAL_RCC_OscConfig+0x780>)
 8003196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319a:	4a97      	ldr	r2, [pc, #604]	; (80033f8 <HAL_RCC_OscConfig+0x780>)
 800319c:	f023 0304 	bic.w	r3, r3, #4
 80031a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d016      	beq.n	80031da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ac:	f7fe f8d4 	bl	8001358 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031b2:	e00a      	b.n	80031ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b4:	f7fe f8d0 	bl	8001358 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e12a      	b.n	8003420 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ca:	4b8b      	ldr	r3, [pc, #556]	; (80033f8 <HAL_RCC_OscConfig+0x780>)
 80031cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0ed      	beq.n	80031b4 <HAL_RCC_OscConfig+0x53c>
 80031d8:	e015      	b.n	8003206 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031da:	f7fe f8bd 	bl	8001358 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031e0:	e00a      	b.n	80031f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e2:	f7fe f8b9 	bl	8001358 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e113      	b.n	8003420 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031f8:	4b7f      	ldr	r3, [pc, #508]	; (80033f8 <HAL_RCC_OscConfig+0x780>)
 80031fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1ed      	bne.n	80031e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003206:	7ffb      	ldrb	r3, [r7, #31]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d105      	bne.n	8003218 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800320c:	4b7a      	ldr	r3, [pc, #488]	; (80033f8 <HAL_RCC_OscConfig+0x780>)
 800320e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003210:	4a79      	ldr	r2, [pc, #484]	; (80033f8 <HAL_RCC_OscConfig+0x780>)
 8003212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003216:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 80fe 	beq.w	800341e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003226:	2b02      	cmp	r3, #2
 8003228:	f040 80d0 	bne.w	80033cc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800322c:	4b72      	ldr	r3, [pc, #456]	; (80033f8 <HAL_RCC_OscConfig+0x780>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f003 0203 	and.w	r2, r3, #3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	429a      	cmp	r2, r3
 800323e:	d130      	bne.n	80032a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	3b01      	subs	r3, #1
 800324c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800324e:	429a      	cmp	r2, r3
 8003250:	d127      	bne.n	80032a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800325e:	429a      	cmp	r2, r3
 8003260:	d11f      	bne.n	80032a2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800326c:	2a07      	cmp	r2, #7
 800326e:	bf14      	ite	ne
 8003270:	2201      	movne	r2, #1
 8003272:	2200      	moveq	r2, #0
 8003274:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003276:	4293      	cmp	r3, r2
 8003278:	d113      	bne.n	80032a2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003284:	085b      	lsrs	r3, r3, #1
 8003286:	3b01      	subs	r3, #1
 8003288:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800328a:	429a      	cmp	r2, r3
 800328c:	d109      	bne.n	80032a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	085b      	lsrs	r3, r3, #1
 800329a:	3b01      	subs	r3, #1
 800329c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800329e:	429a      	cmp	r2, r3
 80032a0:	d06e      	beq.n	8003380 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	2b0c      	cmp	r3, #12
 80032a6:	d069      	beq.n	800337c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80032a8:	4b53      	ldr	r3, [pc, #332]	; (80033f8 <HAL_RCC_OscConfig+0x780>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d105      	bne.n	80032c0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80032b4:	4b50      	ldr	r3, [pc, #320]	; (80033f8 <HAL_RCC_OscConfig+0x780>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e0ad      	b.n	8003420 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032c4:	4b4c      	ldr	r3, [pc, #304]	; (80033f8 <HAL_RCC_OscConfig+0x780>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a4b      	ldr	r2, [pc, #300]	; (80033f8 <HAL_RCC_OscConfig+0x780>)
 80032ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032ce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032d0:	f7fe f842 	bl	8001358 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d8:	f7fe f83e 	bl	8001358 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e09a      	b.n	8003420 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032ea:	4b43      	ldr	r3, [pc, #268]	; (80033f8 <HAL_RCC_OscConfig+0x780>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f0      	bne.n	80032d8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032f6:	4b40      	ldr	r3, [pc, #256]	; (80033f8 <HAL_RCC_OscConfig+0x780>)
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	4b40      	ldr	r3, [pc, #256]	; (80033fc <HAL_RCC_OscConfig+0x784>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003306:	3a01      	subs	r2, #1
 8003308:	0112      	lsls	r2, r2, #4
 800330a:	4311      	orrs	r1, r2
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003310:	0212      	lsls	r2, r2, #8
 8003312:	4311      	orrs	r1, r2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003318:	0852      	lsrs	r2, r2, #1
 800331a:	3a01      	subs	r2, #1
 800331c:	0552      	lsls	r2, r2, #21
 800331e:	4311      	orrs	r1, r2
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003324:	0852      	lsrs	r2, r2, #1
 8003326:	3a01      	subs	r2, #1
 8003328:	0652      	lsls	r2, r2, #25
 800332a:	4311      	orrs	r1, r2
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003330:	0912      	lsrs	r2, r2, #4
 8003332:	0452      	lsls	r2, r2, #17
 8003334:	430a      	orrs	r2, r1
 8003336:	4930      	ldr	r1, [pc, #192]	; (80033f8 <HAL_RCC_OscConfig+0x780>)
 8003338:	4313      	orrs	r3, r2
 800333a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800333c:	4b2e      	ldr	r3, [pc, #184]	; (80033f8 <HAL_RCC_OscConfig+0x780>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a2d      	ldr	r2, [pc, #180]	; (80033f8 <HAL_RCC_OscConfig+0x780>)
 8003342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003346:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003348:	4b2b      	ldr	r3, [pc, #172]	; (80033f8 <HAL_RCC_OscConfig+0x780>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	4a2a      	ldr	r2, [pc, #168]	; (80033f8 <HAL_RCC_OscConfig+0x780>)
 800334e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003352:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003354:	f7fe f800 	bl	8001358 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800335c:	f7fd fffc 	bl	8001358 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e058      	b.n	8003420 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800336e:	4b22      	ldr	r3, [pc, #136]	; (80033f8 <HAL_RCC_OscConfig+0x780>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f0      	beq.n	800335c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800337a:	e050      	b.n	800341e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e04f      	b.n	8003420 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003380:	4b1d      	ldr	r3, [pc, #116]	; (80033f8 <HAL_RCC_OscConfig+0x780>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d148      	bne.n	800341e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800338c:	4b1a      	ldr	r3, [pc, #104]	; (80033f8 <HAL_RCC_OscConfig+0x780>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a19      	ldr	r2, [pc, #100]	; (80033f8 <HAL_RCC_OscConfig+0x780>)
 8003392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003396:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003398:	4b17      	ldr	r3, [pc, #92]	; (80033f8 <HAL_RCC_OscConfig+0x780>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	4a16      	ldr	r2, [pc, #88]	; (80033f8 <HAL_RCC_OscConfig+0x780>)
 800339e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033a4:	f7fd ffd8 	bl	8001358 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ac:	f7fd ffd4 	bl	8001358 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e030      	b.n	8003420 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033be:	4b0e      	ldr	r3, [pc, #56]	; (80033f8 <HAL_RCC_OscConfig+0x780>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0f0      	beq.n	80033ac <HAL_RCC_OscConfig+0x734>
 80033ca:	e028      	b.n	800341e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	2b0c      	cmp	r3, #12
 80033d0:	d023      	beq.n	800341a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d2:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <HAL_RCC_OscConfig+0x780>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a08      	ldr	r2, [pc, #32]	; (80033f8 <HAL_RCC_OscConfig+0x780>)
 80033d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033de:	f7fd ffbb 	bl	8001358 <HAL_GetTick>
 80033e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033e4:	e00c      	b.n	8003400 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e6:	f7fd ffb7 	bl	8001358 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d905      	bls.n	8003400 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e013      	b.n	8003420 <HAL_RCC_OscConfig+0x7a8>
 80033f8:	40021000 	.word	0x40021000
 80033fc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003400:	4b09      	ldr	r3, [pc, #36]	; (8003428 <HAL_RCC_OscConfig+0x7b0>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1ec      	bne.n	80033e6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800340c:	4b06      	ldr	r3, [pc, #24]	; (8003428 <HAL_RCC_OscConfig+0x7b0>)
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	4905      	ldr	r1, [pc, #20]	; (8003428 <HAL_RCC_OscConfig+0x7b0>)
 8003412:	4b06      	ldr	r3, [pc, #24]	; (800342c <HAL_RCC_OscConfig+0x7b4>)
 8003414:	4013      	ands	r3, r2
 8003416:	60cb      	str	r3, [r1, #12]
 8003418:	e001      	b.n	800341e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3720      	adds	r7, #32
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40021000 	.word	0x40021000
 800342c:	feeefffc 	.word	0xfeeefffc

08003430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e0e7      	b.n	8003614 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003444:	4b75      	ldr	r3, [pc, #468]	; (800361c <HAL_RCC_ClockConfig+0x1ec>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d910      	bls.n	8003474 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003452:	4b72      	ldr	r3, [pc, #456]	; (800361c <HAL_RCC_ClockConfig+0x1ec>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f023 0207 	bic.w	r2, r3, #7
 800345a:	4970      	ldr	r1, [pc, #448]	; (800361c <HAL_RCC_ClockConfig+0x1ec>)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	4313      	orrs	r3, r2
 8003460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003462:	4b6e      	ldr	r3, [pc, #440]	; (800361c <HAL_RCC_ClockConfig+0x1ec>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	429a      	cmp	r2, r3
 800346e:	d001      	beq.n	8003474 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e0cf      	b.n	8003614 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d010      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	4b66      	ldr	r3, [pc, #408]	; (8003620 <HAL_RCC_ClockConfig+0x1f0>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800348c:	429a      	cmp	r2, r3
 800348e:	d908      	bls.n	80034a2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003490:	4b63      	ldr	r3, [pc, #396]	; (8003620 <HAL_RCC_ClockConfig+0x1f0>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	4960      	ldr	r1, [pc, #384]	; (8003620 <HAL_RCC_ClockConfig+0x1f0>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d04c      	beq.n	8003548 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b03      	cmp	r3, #3
 80034b4:	d107      	bne.n	80034c6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034b6:	4b5a      	ldr	r3, [pc, #360]	; (8003620 <HAL_RCC_ClockConfig+0x1f0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d121      	bne.n	8003506 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e0a6      	b.n	8003614 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d107      	bne.n	80034de <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034ce:	4b54      	ldr	r3, [pc, #336]	; (8003620 <HAL_RCC_ClockConfig+0x1f0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d115      	bne.n	8003506 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e09a      	b.n	8003614 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d107      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034e6:	4b4e      	ldr	r3, [pc, #312]	; (8003620 <HAL_RCC_ClockConfig+0x1f0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d109      	bne.n	8003506 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e08e      	b.n	8003614 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034f6:	4b4a      	ldr	r3, [pc, #296]	; (8003620 <HAL_RCC_ClockConfig+0x1f0>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e086      	b.n	8003614 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003506:	4b46      	ldr	r3, [pc, #280]	; (8003620 <HAL_RCC_ClockConfig+0x1f0>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f023 0203 	bic.w	r2, r3, #3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	4943      	ldr	r1, [pc, #268]	; (8003620 <HAL_RCC_ClockConfig+0x1f0>)
 8003514:	4313      	orrs	r3, r2
 8003516:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003518:	f7fd ff1e 	bl	8001358 <HAL_GetTick>
 800351c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351e:	e00a      	b.n	8003536 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003520:	f7fd ff1a 	bl	8001358 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	f241 3288 	movw	r2, #5000	; 0x1388
 800352e:	4293      	cmp	r3, r2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e06e      	b.n	8003614 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003536:	4b3a      	ldr	r3, [pc, #232]	; (8003620 <HAL_RCC_ClockConfig+0x1f0>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 020c 	and.w	r2, r3, #12
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	429a      	cmp	r2, r3
 8003546:	d1eb      	bne.n	8003520 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d010      	beq.n	8003576 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	4b31      	ldr	r3, [pc, #196]	; (8003620 <HAL_RCC_ClockConfig+0x1f0>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003560:	429a      	cmp	r2, r3
 8003562:	d208      	bcs.n	8003576 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003564:	4b2e      	ldr	r3, [pc, #184]	; (8003620 <HAL_RCC_ClockConfig+0x1f0>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	492b      	ldr	r1, [pc, #172]	; (8003620 <HAL_RCC_ClockConfig+0x1f0>)
 8003572:	4313      	orrs	r3, r2
 8003574:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003576:	4b29      	ldr	r3, [pc, #164]	; (800361c <HAL_RCC_ClockConfig+0x1ec>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d210      	bcs.n	80035a6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003584:	4b25      	ldr	r3, [pc, #148]	; (800361c <HAL_RCC_ClockConfig+0x1ec>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f023 0207 	bic.w	r2, r3, #7
 800358c:	4923      	ldr	r1, [pc, #140]	; (800361c <HAL_RCC_ClockConfig+0x1ec>)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	4313      	orrs	r3, r2
 8003592:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003594:	4b21      	ldr	r3, [pc, #132]	; (800361c <HAL_RCC_ClockConfig+0x1ec>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d001      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e036      	b.n	8003614 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d008      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035b2:	4b1b      	ldr	r3, [pc, #108]	; (8003620 <HAL_RCC_ClockConfig+0x1f0>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	4918      	ldr	r1, [pc, #96]	; (8003620 <HAL_RCC_ClockConfig+0x1f0>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0308 	and.w	r3, r3, #8
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d009      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035d0:	4b13      	ldr	r3, [pc, #76]	; (8003620 <HAL_RCC_ClockConfig+0x1f0>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	4910      	ldr	r1, [pc, #64]	; (8003620 <HAL_RCC_ClockConfig+0x1f0>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035e4:	f000 f824 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 80035e8:	4602      	mov	r2, r0
 80035ea:	4b0d      	ldr	r3, [pc, #52]	; (8003620 <HAL_RCC_ClockConfig+0x1f0>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	091b      	lsrs	r3, r3, #4
 80035f0:	f003 030f 	and.w	r3, r3, #15
 80035f4:	490b      	ldr	r1, [pc, #44]	; (8003624 <HAL_RCC_ClockConfig+0x1f4>)
 80035f6:	5ccb      	ldrb	r3, [r1, r3]
 80035f8:	f003 031f 	and.w	r3, r3, #31
 80035fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003600:	4a09      	ldr	r2, [pc, #36]	; (8003628 <HAL_RCC_ClockConfig+0x1f8>)
 8003602:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003604:	4b09      	ldr	r3, [pc, #36]	; (800362c <HAL_RCC_ClockConfig+0x1fc>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	f7fd fe55 	bl	80012b8 <HAL_InitTick>
 800360e:	4603      	mov	r3, r0
 8003610:	72fb      	strb	r3, [r7, #11]

  return status;
 8003612:	7afb      	ldrb	r3, [r7, #11]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	40022000 	.word	0x40022000
 8003620:	40021000 	.word	0x40021000
 8003624:	08004e3c 	.word	0x08004e3c
 8003628:	20000004 	.word	0x20000004
 800362c:	20000008 	.word	0x20000008

08003630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003630:	b480      	push	{r7}
 8003632:	b089      	sub	sp, #36	; 0x24
 8003634:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003636:	2300      	movs	r3, #0
 8003638:	61fb      	str	r3, [r7, #28]
 800363a:	2300      	movs	r3, #0
 800363c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800363e:	4b3e      	ldr	r3, [pc, #248]	; (8003738 <HAL_RCC_GetSysClockFreq+0x108>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 030c 	and.w	r3, r3, #12
 8003646:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003648:	4b3b      	ldr	r3, [pc, #236]	; (8003738 <HAL_RCC_GetSysClockFreq+0x108>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f003 0303 	and.w	r3, r3, #3
 8003650:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <HAL_RCC_GetSysClockFreq+0x34>
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	2b0c      	cmp	r3, #12
 800365c:	d121      	bne.n	80036a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d11e      	bne.n	80036a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003664:	4b34      	ldr	r3, [pc, #208]	; (8003738 <HAL_RCC_GetSysClockFreq+0x108>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0308 	and.w	r3, r3, #8
 800366c:	2b00      	cmp	r3, #0
 800366e:	d107      	bne.n	8003680 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003670:	4b31      	ldr	r3, [pc, #196]	; (8003738 <HAL_RCC_GetSysClockFreq+0x108>)
 8003672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003676:	0a1b      	lsrs	r3, r3, #8
 8003678:	f003 030f 	and.w	r3, r3, #15
 800367c:	61fb      	str	r3, [r7, #28]
 800367e:	e005      	b.n	800368c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003680:	4b2d      	ldr	r3, [pc, #180]	; (8003738 <HAL_RCC_GetSysClockFreq+0x108>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	091b      	lsrs	r3, r3, #4
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800368c:	4a2b      	ldr	r2, [pc, #172]	; (800373c <HAL_RCC_GetSysClockFreq+0x10c>)
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003694:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10d      	bne.n	80036b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036a0:	e00a      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d102      	bne.n	80036ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036a8:	4b25      	ldr	r3, [pc, #148]	; (8003740 <HAL_RCC_GetSysClockFreq+0x110>)
 80036aa:	61bb      	str	r3, [r7, #24]
 80036ac:	e004      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d101      	bne.n	80036b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036b4:	4b23      	ldr	r3, [pc, #140]	; (8003744 <HAL_RCC_GetSysClockFreq+0x114>)
 80036b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	2b0c      	cmp	r3, #12
 80036bc:	d134      	bne.n	8003728 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036be:	4b1e      	ldr	r3, [pc, #120]	; (8003738 <HAL_RCC_GetSysClockFreq+0x108>)
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d003      	beq.n	80036d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2b03      	cmp	r3, #3
 80036d2:	d003      	beq.n	80036dc <HAL_RCC_GetSysClockFreq+0xac>
 80036d4:	e005      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036d6:	4b1a      	ldr	r3, [pc, #104]	; (8003740 <HAL_RCC_GetSysClockFreq+0x110>)
 80036d8:	617b      	str	r3, [r7, #20]
      break;
 80036da:	e005      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80036dc:	4b19      	ldr	r3, [pc, #100]	; (8003744 <HAL_RCC_GetSysClockFreq+0x114>)
 80036de:	617b      	str	r3, [r7, #20]
      break;
 80036e0:	e002      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	617b      	str	r3, [r7, #20]
      break;
 80036e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036e8:	4b13      	ldr	r3, [pc, #76]	; (8003738 <HAL_RCC_GetSysClockFreq+0x108>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	091b      	lsrs	r3, r3, #4
 80036ee:	f003 0307 	and.w	r3, r3, #7
 80036f2:	3301      	adds	r3, #1
 80036f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036f6:	4b10      	ldr	r3, [pc, #64]	; (8003738 <HAL_RCC_GetSysClockFreq+0x108>)
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	0a1b      	lsrs	r3, r3, #8
 80036fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	fb03 f202 	mul.w	r2, r3, r2
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	fbb2 f3f3 	udiv	r3, r2, r3
 800370c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800370e:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <HAL_RCC_GetSysClockFreq+0x108>)
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	0e5b      	lsrs	r3, r3, #25
 8003714:	f003 0303 	and.w	r3, r3, #3
 8003718:	3301      	adds	r3, #1
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	fbb2 f3f3 	udiv	r3, r2, r3
 8003726:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003728:	69bb      	ldr	r3, [r7, #24]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3724      	adds	r7, #36	; 0x24
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	40021000 	.word	0x40021000
 800373c:	08004e4c 	.word	0x08004e4c
 8003740:	00f42400 	.word	0x00f42400
 8003744:	007a1200 	.word	0x007a1200

08003748 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003750:	2300      	movs	r3, #0
 8003752:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003754:	4b2a      	ldr	r3, [pc, #168]	; (8003800 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003760:	f7ff fa26 	bl	8002bb0 <HAL_PWREx_GetVoltageRange>
 8003764:	6178      	str	r0, [r7, #20]
 8003766:	e014      	b.n	8003792 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003768:	4b25      	ldr	r3, [pc, #148]	; (8003800 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800376a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376c:	4a24      	ldr	r2, [pc, #144]	; (8003800 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800376e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003772:	6593      	str	r3, [r2, #88]	; 0x58
 8003774:	4b22      	ldr	r3, [pc, #136]	; (8003800 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003780:	f7ff fa16 	bl	8002bb0 <HAL_PWREx_GetVoltageRange>
 8003784:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003786:	4b1e      	ldr	r3, [pc, #120]	; (8003800 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378a:	4a1d      	ldr	r2, [pc, #116]	; (8003800 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800378c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003790:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003798:	d10b      	bne.n	80037b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b80      	cmp	r3, #128	; 0x80
 800379e:	d919      	bls.n	80037d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2ba0      	cmp	r3, #160	; 0xa0
 80037a4:	d902      	bls.n	80037ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037a6:	2302      	movs	r3, #2
 80037a8:	613b      	str	r3, [r7, #16]
 80037aa:	e013      	b.n	80037d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037ac:	2301      	movs	r3, #1
 80037ae:	613b      	str	r3, [r7, #16]
 80037b0:	e010      	b.n	80037d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b80      	cmp	r3, #128	; 0x80
 80037b6:	d902      	bls.n	80037be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80037b8:	2303      	movs	r3, #3
 80037ba:	613b      	str	r3, [r7, #16]
 80037bc:	e00a      	b.n	80037d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b80      	cmp	r3, #128	; 0x80
 80037c2:	d102      	bne.n	80037ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037c4:	2302      	movs	r3, #2
 80037c6:	613b      	str	r3, [r7, #16]
 80037c8:	e004      	b.n	80037d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b70      	cmp	r3, #112	; 0x70
 80037ce:	d101      	bne.n	80037d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037d0:	2301      	movs	r3, #1
 80037d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037d4:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f023 0207 	bic.w	r2, r3, #7
 80037dc:	4909      	ldr	r1, [pc, #36]	; (8003804 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80037e4:	4b07      	ldr	r3, [pc, #28]	; (8003804 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d001      	beq.n	80037f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3718      	adds	r7, #24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40021000 	.word	0x40021000
 8003804:	40022000 	.word	0x40022000

08003808 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003810:	2300      	movs	r3, #0
 8003812:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003814:	2300      	movs	r3, #0
 8003816:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003820:	2b00      	cmp	r3, #0
 8003822:	d041      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003828:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800382c:	d02a      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800382e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003832:	d824      	bhi.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003834:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003838:	d008      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800383a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800383e:	d81e      	bhi.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003844:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003848:	d010      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800384a:	e018      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800384c:	4b86      	ldr	r3, [pc, #536]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	4a85      	ldr	r2, [pc, #532]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003856:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003858:	e015      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	3304      	adds	r3, #4
 800385e:	2100      	movs	r1, #0
 8003860:	4618      	mov	r0, r3
 8003862:	f000 fabb 	bl	8003ddc <RCCEx_PLLSAI1_Config>
 8003866:	4603      	mov	r3, r0
 8003868:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800386a:	e00c      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3320      	adds	r3, #32
 8003870:	2100      	movs	r1, #0
 8003872:	4618      	mov	r0, r3
 8003874:	f000 fba6 	bl	8003fc4 <RCCEx_PLLSAI2_Config>
 8003878:	4603      	mov	r3, r0
 800387a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800387c:	e003      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	74fb      	strb	r3, [r7, #19]
      break;
 8003882:	e000      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003884:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003886:	7cfb      	ldrb	r3, [r7, #19]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10b      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800388c:	4b76      	ldr	r3, [pc, #472]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800388e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003892:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800389a:	4973      	ldr	r1, [pc, #460]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038a2:	e001      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a4:	7cfb      	ldrb	r3, [r7, #19]
 80038a6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d041      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038bc:	d02a      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80038be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038c2:	d824      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80038c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038c8:	d008      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80038ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038ce:	d81e      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00a      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80038d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038d8:	d010      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80038da:	e018      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80038dc:	4b62      	ldr	r3, [pc, #392]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	4a61      	ldr	r2, [pc, #388]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038e8:	e015      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	3304      	adds	r3, #4
 80038ee:	2100      	movs	r1, #0
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 fa73 	bl	8003ddc <RCCEx_PLLSAI1_Config>
 80038f6:	4603      	mov	r3, r0
 80038f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038fa:	e00c      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3320      	adds	r3, #32
 8003900:	2100      	movs	r1, #0
 8003902:	4618      	mov	r0, r3
 8003904:	f000 fb5e 	bl	8003fc4 <RCCEx_PLLSAI2_Config>
 8003908:	4603      	mov	r3, r0
 800390a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800390c:	e003      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	74fb      	strb	r3, [r7, #19]
      break;
 8003912:	e000      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003914:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003916:	7cfb      	ldrb	r3, [r7, #19]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10b      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800391c:	4b52      	ldr	r3, [pc, #328]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800391e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003922:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800392a:	494f      	ldr	r1, [pc, #316]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800392c:	4313      	orrs	r3, r2
 800392e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003932:	e001      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003934:	7cfb      	ldrb	r3, [r7, #19]
 8003936:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 80a0 	beq.w	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003946:	2300      	movs	r3, #0
 8003948:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800394a:	4b47      	ldr	r3, [pc, #284]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800394c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003956:	2301      	movs	r3, #1
 8003958:	e000      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800395a:	2300      	movs	r3, #0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00d      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003960:	4b41      	ldr	r3, [pc, #260]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003964:	4a40      	ldr	r2, [pc, #256]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800396a:	6593      	str	r3, [r2, #88]	; 0x58
 800396c:	4b3e      	ldr	r3, [pc, #248]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800396e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003974:	60bb      	str	r3, [r7, #8]
 8003976:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003978:	2301      	movs	r3, #1
 800397a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800397c:	4b3b      	ldr	r3, [pc, #236]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a3a      	ldr	r2, [pc, #232]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003986:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003988:	f7fd fce6 	bl	8001358 <HAL_GetTick>
 800398c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800398e:	e009      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003990:	f7fd fce2 	bl	8001358 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d902      	bls.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	74fb      	strb	r3, [r7, #19]
        break;
 80039a2:	e005      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039a4:	4b31      	ldr	r3, [pc, #196]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0ef      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80039b0:	7cfb      	ldrb	r3, [r7, #19]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d15c      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039b6:	4b2c      	ldr	r3, [pc, #176]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d01f      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d019      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039d4:	4b24      	ldr	r3, [pc, #144]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039e0:	4b21      	ldr	r3, [pc, #132]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e6:	4a20      	ldr	r2, [pc, #128]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039f0:	4b1d      	ldr	r3, [pc, #116]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f6:	4a1c      	ldr	r2, [pc, #112]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a00:	4a19      	ldr	r2, [pc, #100]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d016      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a12:	f7fd fca1 	bl	8001358 <HAL_GetTick>
 8003a16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a18:	e00b      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a1a:	f7fd fc9d 	bl	8001358 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d902      	bls.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	74fb      	strb	r3, [r7, #19]
            break;
 8003a30:	e006      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a32:	4b0d      	ldr	r3, [pc, #52]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0ec      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003a40:	7cfb      	ldrb	r3, [r7, #19]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10c      	bne.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a46:	4b08      	ldr	r3, [pc, #32]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a56:	4904      	ldr	r1, [pc, #16]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a5e:	e009      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a60:	7cfb      	ldrb	r3, [r7, #19]
 8003a62:	74bb      	strb	r3, [r7, #18]
 8003a64:	e006      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003a66:	bf00      	nop
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a70:	7cfb      	ldrb	r3, [r7, #19]
 8003a72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a74:	7c7b      	ldrb	r3, [r7, #17]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d105      	bne.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a7a:	4b9e      	ldr	r3, [pc, #632]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7e:	4a9d      	ldr	r2, [pc, #628]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a84:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00a      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a92:	4b98      	ldr	r3, [pc, #608]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a98:	f023 0203 	bic.w	r2, r3, #3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa0:	4994      	ldr	r1, [pc, #592]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00a      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ab4:	4b8f      	ldr	r3, [pc, #572]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aba:	f023 020c 	bic.w	r2, r3, #12
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac2:	498c      	ldr	r1, [pc, #560]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0304 	and.w	r3, r3, #4
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00a      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ad6:	4b87      	ldr	r3, [pc, #540]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003adc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae4:	4983      	ldr	r1, [pc, #524]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0308 	and.w	r3, r3, #8
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00a      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003af8:	4b7e      	ldr	r3, [pc, #504]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b06:	497b      	ldr	r1, [pc, #492]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0310 	and.w	r3, r3, #16
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00a      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b1a:	4b76      	ldr	r3, [pc, #472]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b28:	4972      	ldr	r1, [pc, #456]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0320 	and.w	r3, r3, #32
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00a      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b3c:	4b6d      	ldr	r3, [pc, #436]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b4a:	496a      	ldr	r1, [pc, #424]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00a      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b5e:	4b65      	ldr	r3, [pc, #404]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6c:	4961      	ldr	r1, [pc, #388]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00a      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b80:	4b5c      	ldr	r3, [pc, #368]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b8e:	4959      	ldr	r1, [pc, #356]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00a      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ba2:	4b54      	ldr	r3, [pc, #336]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb0:	4950      	ldr	r1, [pc, #320]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00a      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bc4:	4b4b      	ldr	r3, [pc, #300]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd2:	4948      	ldr	r1, [pc, #288]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00a      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003be6:	4b43      	ldr	r3, [pc, #268]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf4:	493f      	ldr	r1, [pc, #252]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d028      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c08:	4b3a      	ldr	r3, [pc, #232]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c16:	4937      	ldr	r1, [pc, #220]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c26:	d106      	bne.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c28:	4b32      	ldr	r3, [pc, #200]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	4a31      	ldr	r2, [pc, #196]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c32:	60d3      	str	r3, [r2, #12]
 8003c34:	e011      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c3e:	d10c      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3304      	adds	r3, #4
 8003c44:	2101      	movs	r1, #1
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 f8c8 	bl	8003ddc <RCCEx_PLLSAI1_Config>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c50:	7cfb      	ldrb	r3, [r7, #19]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003c56:	7cfb      	ldrb	r3, [r7, #19]
 8003c58:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d028      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c66:	4b23      	ldr	r3, [pc, #140]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c74:	491f      	ldr	r1, [pc, #124]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c84:	d106      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c86:	4b1b      	ldr	r3, [pc, #108]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	4a1a      	ldr	r2, [pc, #104]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c90:	60d3      	str	r3, [r2, #12]
 8003c92:	e011      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c9c:	d10c      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 f899 	bl	8003ddc <RCCEx_PLLSAI1_Config>
 8003caa:	4603      	mov	r3, r0
 8003cac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cae:	7cfb      	ldrb	r3, [r7, #19]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003cb4:	7cfb      	ldrb	r3, [r7, #19]
 8003cb6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d02b      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cc4:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd2:	4908      	ldr	r1, [pc, #32]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ce2:	d109      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ce4:	4b03      	ldr	r3, [pc, #12]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	4a02      	ldr	r2, [pc, #8]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cee:	60d3      	str	r3, [r2, #12]
 8003cf0:	e014      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003cf2:	bf00      	nop
 8003cf4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d00:	d10c      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3304      	adds	r3, #4
 8003d06:	2101      	movs	r1, #1
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 f867 	bl	8003ddc <RCCEx_PLLSAI1_Config>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d12:	7cfb      	ldrb	r3, [r7, #19]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003d18:	7cfb      	ldrb	r3, [r7, #19]
 8003d1a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d02f      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d28:	4b2b      	ldr	r3, [pc, #172]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d36:	4928      	ldr	r1, [pc, #160]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d46:	d10d      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3304      	adds	r3, #4
 8003d4c:	2102      	movs	r1, #2
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 f844 	bl	8003ddc <RCCEx_PLLSAI1_Config>
 8003d54:	4603      	mov	r3, r0
 8003d56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d58:	7cfb      	ldrb	r3, [r7, #19]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d014      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d5e:	7cfb      	ldrb	r3, [r7, #19]
 8003d60:	74bb      	strb	r3, [r7, #18]
 8003d62:	e011      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d6c:	d10c      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	3320      	adds	r3, #32
 8003d72:	2102      	movs	r1, #2
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 f925 	bl	8003fc4 <RCCEx_PLLSAI2_Config>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d7e:	7cfb      	ldrb	r3, [r7, #19]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d84:	7cfb      	ldrb	r3, [r7, #19]
 8003d86:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00a      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d94:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003da2:	490d      	ldr	r1, [pc, #52]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00b      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003db6:	4b08      	ldr	r3, [pc, #32]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dc6:	4904      	ldr	r1, [pc, #16]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003dce:	7cbb      	ldrb	r3, [r7, #18]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40021000 	.word	0x40021000

08003ddc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003de6:	2300      	movs	r3, #0
 8003de8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dea:	4b75      	ldr	r3, [pc, #468]	; (8003fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d018      	beq.n	8003e28 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003df6:	4b72      	ldr	r3, [pc, #456]	; (8003fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	f003 0203 	and.w	r2, r3, #3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d10d      	bne.n	8003e22 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
       ||
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d009      	beq.n	8003e22 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003e0e:	4b6c      	ldr	r3, [pc, #432]	; (8003fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	091b      	lsrs	r3, r3, #4
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
       ||
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d047      	beq.n	8003eb2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	73fb      	strb	r3, [r7, #15]
 8003e26:	e044      	b.n	8003eb2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b03      	cmp	r3, #3
 8003e2e:	d018      	beq.n	8003e62 <RCCEx_PLLSAI1_Config+0x86>
 8003e30:	2b03      	cmp	r3, #3
 8003e32:	d825      	bhi.n	8003e80 <RCCEx_PLLSAI1_Config+0xa4>
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d002      	beq.n	8003e3e <RCCEx_PLLSAI1_Config+0x62>
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d009      	beq.n	8003e50 <RCCEx_PLLSAI1_Config+0x74>
 8003e3c:	e020      	b.n	8003e80 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e3e:	4b60      	ldr	r3, [pc, #384]	; (8003fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d11d      	bne.n	8003e86 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e4e:	e01a      	b.n	8003e86 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e50:	4b5b      	ldr	r3, [pc, #364]	; (8003fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d116      	bne.n	8003e8a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e60:	e013      	b.n	8003e8a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e62:	4b57      	ldr	r3, [pc, #348]	; (8003fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10f      	bne.n	8003e8e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e6e:	4b54      	ldr	r3, [pc, #336]	; (8003fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d109      	bne.n	8003e8e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e7e:	e006      	b.n	8003e8e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	73fb      	strb	r3, [r7, #15]
      break;
 8003e84:	e004      	b.n	8003e90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e86:	bf00      	nop
 8003e88:	e002      	b.n	8003e90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e8a:	bf00      	nop
 8003e8c:	e000      	b.n	8003e90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e8e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10d      	bne.n	8003eb2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e96:	4b4a      	ldr	r3, [pc, #296]	; (8003fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6819      	ldr	r1, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	011b      	lsls	r3, r3, #4
 8003eaa:	430b      	orrs	r3, r1
 8003eac:	4944      	ldr	r1, [pc, #272]	; (8003fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d17d      	bne.n	8003fb4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003eb8:	4b41      	ldr	r3, [pc, #260]	; (8003fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a40      	ldr	r2, [pc, #256]	; (8003fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ebe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ec2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ec4:	f7fd fa48 	bl	8001358 <HAL_GetTick>
 8003ec8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003eca:	e009      	b.n	8003ee0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ecc:	f7fd fa44 	bl	8001358 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d902      	bls.n	8003ee0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	73fb      	strb	r3, [r7, #15]
        break;
 8003ede:	e005      	b.n	8003eec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ee0:	4b37      	ldr	r3, [pc, #220]	; (8003fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1ef      	bne.n	8003ecc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003eec:	7bfb      	ldrb	r3, [r7, #15]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d160      	bne.n	8003fb4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d111      	bne.n	8003f1c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ef8:	4b31      	ldr	r3, [pc, #196]	; (8003fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	6892      	ldr	r2, [r2, #8]
 8003f08:	0211      	lsls	r1, r2, #8
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	68d2      	ldr	r2, [r2, #12]
 8003f0e:	0912      	lsrs	r2, r2, #4
 8003f10:	0452      	lsls	r2, r2, #17
 8003f12:	430a      	orrs	r2, r1
 8003f14:	492a      	ldr	r1, [pc, #168]	; (8003fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	610b      	str	r3, [r1, #16]
 8003f1a:	e027      	b.n	8003f6c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d112      	bne.n	8003f48 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f22:	4b27      	ldr	r3, [pc, #156]	; (8003fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003f2a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	6892      	ldr	r2, [r2, #8]
 8003f32:	0211      	lsls	r1, r2, #8
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6912      	ldr	r2, [r2, #16]
 8003f38:	0852      	lsrs	r2, r2, #1
 8003f3a:	3a01      	subs	r2, #1
 8003f3c:	0552      	lsls	r2, r2, #21
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	491f      	ldr	r1, [pc, #124]	; (8003fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	610b      	str	r3, [r1, #16]
 8003f46:	e011      	b.n	8003f6c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f48:	4b1d      	ldr	r3, [pc, #116]	; (8003fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6892      	ldr	r2, [r2, #8]
 8003f58:	0211      	lsls	r1, r2, #8
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6952      	ldr	r2, [r2, #20]
 8003f5e:	0852      	lsrs	r2, r2, #1
 8003f60:	3a01      	subs	r2, #1
 8003f62:	0652      	lsls	r2, r2, #25
 8003f64:	430a      	orrs	r2, r1
 8003f66:	4916      	ldr	r1, [pc, #88]	; (8003fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f6c:	4b14      	ldr	r3, [pc, #80]	; (8003fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a13      	ldr	r2, [pc, #76]	; (8003fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f78:	f7fd f9ee 	bl	8001358 <HAL_GetTick>
 8003f7c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f7e:	e009      	b.n	8003f94 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f80:	f7fd f9ea 	bl	8001358 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d902      	bls.n	8003f94 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	73fb      	strb	r3, [r7, #15]
          break;
 8003f92:	e005      	b.n	8003fa0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f94:	4b0a      	ldr	r3, [pc, #40]	; (8003fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0ef      	beq.n	8003f80 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003fa6:	4b06      	ldr	r3, [pc, #24]	; (8003fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fa8:	691a      	ldr	r2, [r3, #16]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	4904      	ldr	r1, [pc, #16]	; (8003fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40021000 	.word	0x40021000

08003fc4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003fd2:	4b6a      	ldr	r3, [pc, #424]	; (800417c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	f003 0303 	and.w	r3, r3, #3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d018      	beq.n	8004010 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003fde:	4b67      	ldr	r3, [pc, #412]	; (800417c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f003 0203 	and.w	r2, r3, #3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d10d      	bne.n	800400a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
       ||
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d009      	beq.n	800400a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003ff6:	4b61      	ldr	r3, [pc, #388]	; (800417c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	091b      	lsrs	r3, r3, #4
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
       ||
 8004006:	429a      	cmp	r2, r3
 8004008:	d047      	beq.n	800409a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	73fb      	strb	r3, [r7, #15]
 800400e:	e044      	b.n	800409a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2b03      	cmp	r3, #3
 8004016:	d018      	beq.n	800404a <RCCEx_PLLSAI2_Config+0x86>
 8004018:	2b03      	cmp	r3, #3
 800401a:	d825      	bhi.n	8004068 <RCCEx_PLLSAI2_Config+0xa4>
 800401c:	2b01      	cmp	r3, #1
 800401e:	d002      	beq.n	8004026 <RCCEx_PLLSAI2_Config+0x62>
 8004020:	2b02      	cmp	r3, #2
 8004022:	d009      	beq.n	8004038 <RCCEx_PLLSAI2_Config+0x74>
 8004024:	e020      	b.n	8004068 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004026:	4b55      	ldr	r3, [pc, #340]	; (800417c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d11d      	bne.n	800406e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004036:	e01a      	b.n	800406e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004038:	4b50      	ldr	r3, [pc, #320]	; (800417c <RCCEx_PLLSAI2_Config+0x1b8>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004040:	2b00      	cmp	r3, #0
 8004042:	d116      	bne.n	8004072 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004048:	e013      	b.n	8004072 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800404a:	4b4c      	ldr	r3, [pc, #304]	; (800417c <RCCEx_PLLSAI2_Config+0x1b8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10f      	bne.n	8004076 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004056:	4b49      	ldr	r3, [pc, #292]	; (800417c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d109      	bne.n	8004076 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004066:	e006      	b.n	8004076 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	73fb      	strb	r3, [r7, #15]
      break;
 800406c:	e004      	b.n	8004078 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800406e:	bf00      	nop
 8004070:	e002      	b.n	8004078 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004072:	bf00      	nop
 8004074:	e000      	b.n	8004078 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004076:	bf00      	nop
    }

    if(status == HAL_OK)
 8004078:	7bfb      	ldrb	r3, [r7, #15]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10d      	bne.n	800409a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800407e:	4b3f      	ldr	r3, [pc, #252]	; (800417c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6819      	ldr	r1, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	3b01      	subs	r3, #1
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	430b      	orrs	r3, r1
 8004094:	4939      	ldr	r1, [pc, #228]	; (800417c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004096:	4313      	orrs	r3, r2
 8004098:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800409a:	7bfb      	ldrb	r3, [r7, #15]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d167      	bne.n	8004170 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80040a0:	4b36      	ldr	r3, [pc, #216]	; (800417c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a35      	ldr	r2, [pc, #212]	; (800417c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ac:	f7fd f954 	bl	8001358 <HAL_GetTick>
 80040b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80040b2:	e009      	b.n	80040c8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040b4:	f7fd f950 	bl	8001358 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d902      	bls.n	80040c8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	73fb      	strb	r3, [r7, #15]
        break;
 80040c6:	e005      	b.n	80040d4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80040c8:	4b2c      	ldr	r3, [pc, #176]	; (800417c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1ef      	bne.n	80040b4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d14a      	bne.n	8004170 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d111      	bne.n	8004104 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80040e0:	4b26      	ldr	r3, [pc, #152]	; (800417c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80040e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6892      	ldr	r2, [r2, #8]
 80040f0:	0211      	lsls	r1, r2, #8
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	68d2      	ldr	r2, [r2, #12]
 80040f6:	0912      	lsrs	r2, r2, #4
 80040f8:	0452      	lsls	r2, r2, #17
 80040fa:	430a      	orrs	r2, r1
 80040fc:	491f      	ldr	r1, [pc, #124]	; (800417c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	614b      	str	r3, [r1, #20]
 8004102:	e011      	b.n	8004128 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004104:	4b1d      	ldr	r3, [pc, #116]	; (800417c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800410c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6892      	ldr	r2, [r2, #8]
 8004114:	0211      	lsls	r1, r2, #8
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	6912      	ldr	r2, [r2, #16]
 800411a:	0852      	lsrs	r2, r2, #1
 800411c:	3a01      	subs	r2, #1
 800411e:	0652      	lsls	r2, r2, #25
 8004120:	430a      	orrs	r2, r1
 8004122:	4916      	ldr	r1, [pc, #88]	; (800417c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004124:	4313      	orrs	r3, r2
 8004126:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004128:	4b14      	ldr	r3, [pc, #80]	; (800417c <RCCEx_PLLSAI2_Config+0x1b8>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a13      	ldr	r2, [pc, #76]	; (800417c <RCCEx_PLLSAI2_Config+0x1b8>)
 800412e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004132:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004134:	f7fd f910 	bl	8001358 <HAL_GetTick>
 8004138:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800413a:	e009      	b.n	8004150 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800413c:	f7fd f90c 	bl	8001358 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d902      	bls.n	8004150 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	73fb      	strb	r3, [r7, #15]
          break;
 800414e:	e005      	b.n	800415c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004150:	4b0a      	ldr	r3, [pc, #40]	; (800417c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0ef      	beq.n	800413c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800415c:	7bfb      	ldrb	r3, [r7, #15]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d106      	bne.n	8004170 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004162:	4b06      	ldr	r3, [pc, #24]	; (800417c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004164:	695a      	ldr	r2, [r3, #20]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	4904      	ldr	r1, [pc, #16]	; (800417c <RCCEx_PLLSAI2_Config+0x1b8>)
 800416c:	4313      	orrs	r3, r2
 800416e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004170:	7bfb      	ldrb	r3, [r7, #15]
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	40021000 	.word	0x40021000

08004180 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e095      	b.n	80042be <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	2b00      	cmp	r3, #0
 8004198:	d108      	bne.n	80041ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041a2:	d009      	beq.n	80041b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	61da      	str	r2, [r3, #28]
 80041aa:	e005      	b.n	80041b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d106      	bne.n	80041d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7fc fc5c 	bl	8000a90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041f8:	d902      	bls.n	8004200 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80041fa:	2300      	movs	r3, #0
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	e002      	b.n	8004206 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004204:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800420e:	d007      	beq.n	8004220 <HAL_SPI_Init+0xa0>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004218:	d002      	beq.n	8004220 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	431a      	orrs	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800424e:	431a      	orrs	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	69db      	ldr	r3, [r3, #28]
 8004254:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004258:	431a      	orrs	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004262:	ea42 0103 	orr.w	r1, r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	0c1b      	lsrs	r3, r3, #16
 800427c:	f003 0204 	and.w	r2, r3, #4
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	f003 0310 	and.w	r3, r3, #16
 8004288:	431a      	orrs	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	431a      	orrs	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800429c:	ea42 0103 	orr.w	r1, r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b088      	sub	sp, #32
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	60f8      	str	r0, [r7, #12]
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	603b      	str	r3, [r7, #0]
 80042d2:	4613      	mov	r3, r2
 80042d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042d6:	2300      	movs	r3, #0
 80042d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d101      	bne.n	80042e8 <HAL_SPI_Transmit+0x22>
 80042e4:	2302      	movs	r3, #2
 80042e6:	e15f      	b.n	80045a8 <HAL_SPI_Transmit+0x2e2>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042f0:	f7fd f832 	bl	8001358 <HAL_GetTick>
 80042f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80042f6:	88fb      	ldrh	r3, [r7, #6]
 80042f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b01      	cmp	r3, #1
 8004304:	d002      	beq.n	800430c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004306:	2302      	movs	r3, #2
 8004308:	77fb      	strb	r3, [r7, #31]
    goto error;
 800430a:	e148      	b.n	800459e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <HAL_SPI_Transmit+0x52>
 8004312:	88fb      	ldrh	r3, [r7, #6]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d102      	bne.n	800431e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800431c:	e13f      	b.n	800459e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2203      	movs	r2, #3
 8004322:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	88fa      	ldrh	r2, [r7, #6]
 8004336:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	88fa      	ldrh	r2, [r7, #6]
 800433c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004368:	d10f      	bne.n	800438a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004378:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004388:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004394:	2b40      	cmp	r3, #64	; 0x40
 8004396:	d007      	beq.n	80043a8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043b0:	d94f      	bls.n	8004452 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d002      	beq.n	80043c0 <HAL_SPI_Transmit+0xfa>
 80043ba:	8afb      	ldrh	r3, [r7, #22]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d142      	bne.n	8004446 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	881a      	ldrh	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d0:	1c9a      	adds	r2, r3, #2
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043da:	b29b      	uxth	r3, r3
 80043dc:	3b01      	subs	r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80043e4:	e02f      	b.n	8004446 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d112      	bne.n	800441a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f8:	881a      	ldrh	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004404:	1c9a      	adds	r2, r3, #2
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004418:	e015      	b.n	8004446 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800441a:	f7fc ff9d 	bl	8001358 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d803      	bhi.n	8004432 <HAL_SPI_Transmit+0x16c>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004430:	d102      	bne.n	8004438 <HAL_SPI_Transmit+0x172>
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d106      	bne.n	8004446 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004444:	e0ab      	b.n	800459e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800444a:	b29b      	uxth	r3, r3
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1ca      	bne.n	80043e6 <HAL_SPI_Transmit+0x120>
 8004450:	e080      	b.n	8004554 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d002      	beq.n	8004460 <HAL_SPI_Transmit+0x19a>
 800445a:	8afb      	ldrh	r3, [r7, #22]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d174      	bne.n	800454a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004464:	b29b      	uxth	r3, r3
 8004466:	2b01      	cmp	r3, #1
 8004468:	d912      	bls.n	8004490 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446e:	881a      	ldrh	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447a:	1c9a      	adds	r2, r3, #2
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004484:	b29b      	uxth	r3, r3
 8004486:	3b02      	subs	r3, #2
 8004488:	b29a      	uxth	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800448e:	e05c      	b.n	800454a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	330c      	adds	r3, #12
 800449a:	7812      	ldrb	r2, [r2, #0]
 800449c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80044b6:	e048      	b.n	800454a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d12b      	bne.n	800451e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d912      	bls.n	80044f6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d4:	881a      	ldrh	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e0:	1c9a      	adds	r2, r3, #2
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	3b02      	subs	r3, #2
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044f4:	e029      	b.n	800454a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	330c      	adds	r3, #12
 8004500:	7812      	ldrb	r2, [r2, #0]
 8004502:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800451c:	e015      	b.n	800454a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800451e:	f7fc ff1b 	bl	8001358 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d803      	bhi.n	8004536 <HAL_SPI_Transmit+0x270>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004534:	d102      	bne.n	800453c <HAL_SPI_Transmit+0x276>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d106      	bne.n	800454a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004548:	e029      	b.n	800459e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800454e:	b29b      	uxth	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1b1      	bne.n	80044b8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	6839      	ldr	r1, [r7, #0]
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 f947 	bl	80047ec <SPI_EndRxTxTransaction>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2220      	movs	r2, #32
 8004568:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10a      	bne.n	8004588 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004572:	2300      	movs	r3, #0
 8004574:	613b      	str	r3, [r7, #16]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	613b      	str	r3, [r7, #16]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	613b      	str	r3, [r7, #16]
 8004586:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800458c:	2b00      	cmp	r3, #0
 800458e:	d002      	beq.n	8004596 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	77fb      	strb	r3, [r7, #31]
 8004594:	e003      	b.n	800459e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80045a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3720      	adds	r7, #32
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	603b      	str	r3, [r7, #0]
 80045bc:	4613      	mov	r3, r2
 80045be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045c0:	f7fc feca 	bl	8001358 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	1a9b      	subs	r3, r3, r2
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	4413      	add	r3, r2
 80045ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045d0:	f7fc fec2 	bl	8001358 <HAL_GetTick>
 80045d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045d6:	4b39      	ldr	r3, [pc, #228]	; (80046bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	015b      	lsls	r3, r3, #5
 80045dc:	0d1b      	lsrs	r3, r3, #20
 80045de:	69fa      	ldr	r2, [r7, #28]
 80045e0:	fb02 f303 	mul.w	r3, r2, r3
 80045e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045e6:	e054      	b.n	8004692 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ee:	d050      	beq.n	8004692 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045f0:	f7fc feb2 	bl	8001358 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	69fa      	ldr	r2, [r7, #28]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d902      	bls.n	8004606 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d13d      	bne.n	8004682 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004614:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800461e:	d111      	bne.n	8004644 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004628:	d004      	beq.n	8004634 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004632:	d107      	bne.n	8004644 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004642:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800464c:	d10f      	bne.n	800466e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800466c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e017      	b.n	80046b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	3b01      	subs	r3, #1
 8004690:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	4013      	ands	r3, r2
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	429a      	cmp	r2, r3
 80046a0:	bf0c      	ite	eq
 80046a2:	2301      	moveq	r3, #1
 80046a4:	2300      	movne	r3, #0
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	461a      	mov	r2, r3
 80046aa:	79fb      	ldrb	r3, [r7, #7]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d19b      	bne.n	80045e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3720      	adds	r7, #32
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	20000004 	.word	0x20000004

080046c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b08a      	sub	sp, #40	; 0x28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
 80046cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80046ce:	2300      	movs	r3, #0
 80046d0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80046d2:	f7fc fe41 	bl	8001358 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046da:	1a9b      	subs	r3, r3, r2
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	4413      	add	r3, r2
 80046e0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80046e2:	f7fc fe39 	bl	8001358 <HAL_GetTick>
 80046e6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	330c      	adds	r3, #12
 80046ee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80046f0:	4b3d      	ldr	r3, [pc, #244]	; (80047e8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	4613      	mov	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	00da      	lsls	r2, r3, #3
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	0d1b      	lsrs	r3, r3, #20
 8004700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004702:	fb02 f303 	mul.w	r3, r2, r3
 8004706:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004708:	e060      	b.n	80047cc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004710:	d107      	bne.n	8004722 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d104      	bne.n	8004722 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	b2db      	uxtb	r3, r3
 800471e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004720:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004728:	d050      	beq.n	80047cc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800472a:	f7fc fe15 	bl	8001358 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004736:	429a      	cmp	r2, r3
 8004738:	d902      	bls.n	8004740 <SPI_WaitFifoStateUntilTimeout+0x80>
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	2b00      	cmp	r3, #0
 800473e:	d13d      	bne.n	80047bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800474e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004758:	d111      	bne.n	800477e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004762:	d004      	beq.n	800476e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800476c:	d107      	bne.n	800477e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800477c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004786:	d10f      	bne.n	80047a8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e010      	b.n	80047de <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	3b01      	subs	r3, #1
 80047ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	4013      	ands	r3, r2
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d196      	bne.n	800470a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3728      	adds	r7, #40	; 0x28
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	20000004 	.word	0x20000004

080047ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af02      	add	r7, sp, #8
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	2200      	movs	r2, #0
 8004800:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f7ff ff5b 	bl	80046c0 <SPI_WaitFifoStateUntilTimeout>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d007      	beq.n	8004820 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004814:	f043 0220 	orr.w	r2, r3, #32
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e027      	b.n	8004870 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2200      	movs	r2, #0
 8004828:	2180      	movs	r1, #128	; 0x80
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f7ff fec0 	bl	80045b0 <SPI_WaitFlagStateUntilTimeout>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d007      	beq.n	8004846 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800483a:	f043 0220 	orr.w	r2, r3, #32
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e014      	b.n	8004870 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2200      	movs	r2, #0
 800484e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f7ff ff34 	bl	80046c0 <SPI_WaitFifoStateUntilTimeout>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d007      	beq.n	800486e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004862:	f043 0220 	orr.w	r2, r3, #32
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e000      	b.n	8004870 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e049      	b.n	800491e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d106      	bne.n	80048a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7fc f938 	bl	8000b14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3304      	adds	r3, #4
 80048b4:	4619      	mov	r1, r3
 80048b6:	4610      	mov	r0, r2
 80048b8:	f000 f9d0 	bl	8004c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
	...

08004928 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b01      	cmp	r3, #1
 800493a:	d001      	beq.n	8004940 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e04f      	b.n	80049e0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0201 	orr.w	r2, r2, #1
 8004956:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a23      	ldr	r2, [pc, #140]	; (80049ec <HAL_TIM_Base_Start_IT+0xc4>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d01d      	beq.n	800499e <HAL_TIM_Base_Start_IT+0x76>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800496a:	d018      	beq.n	800499e <HAL_TIM_Base_Start_IT+0x76>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a1f      	ldr	r2, [pc, #124]	; (80049f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d013      	beq.n	800499e <HAL_TIM_Base_Start_IT+0x76>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a1e      	ldr	r2, [pc, #120]	; (80049f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d00e      	beq.n	800499e <HAL_TIM_Base_Start_IT+0x76>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a1c      	ldr	r2, [pc, #112]	; (80049f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d009      	beq.n	800499e <HAL_TIM_Base_Start_IT+0x76>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a1b      	ldr	r2, [pc, #108]	; (80049fc <HAL_TIM_Base_Start_IT+0xd4>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d004      	beq.n	800499e <HAL_TIM_Base_Start_IT+0x76>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a19      	ldr	r2, [pc, #100]	; (8004a00 <HAL_TIM_Base_Start_IT+0xd8>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d115      	bne.n	80049ca <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	4b17      	ldr	r3, [pc, #92]	; (8004a04 <HAL_TIM_Base_Start_IT+0xdc>)
 80049a6:	4013      	ands	r3, r2
 80049a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2b06      	cmp	r3, #6
 80049ae:	d015      	beq.n	80049dc <HAL_TIM_Base_Start_IT+0xb4>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b6:	d011      	beq.n	80049dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0201 	orr.w	r2, r2, #1
 80049c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c8:	e008      	b.n	80049dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f042 0201 	orr.w	r2, r2, #1
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	e000      	b.n	80049de <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	40012c00 	.word	0x40012c00
 80049f0:	40000400 	.word	0x40000400
 80049f4:	40000800 	.word	0x40000800
 80049f8:	40000c00 	.word	0x40000c00
 80049fc:	40013400 	.word	0x40013400
 8004a00:	40014000 	.word	0x40014000
 8004a04:	00010007 	.word	0x00010007

08004a08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d020      	beq.n	8004a6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d01b      	beq.n	8004a6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0202 	mvn.w	r2, #2
 8004a3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f8e4 	bl	8004c20 <HAL_TIM_IC_CaptureCallback>
 8004a58:	e005      	b.n	8004a66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f8d6 	bl	8004c0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 f8e7 	bl	8004c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d020      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d01b      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f06f 0204 	mvn.w	r2, #4
 8004a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f8be 	bl	8004c20 <HAL_TIM_IC_CaptureCallback>
 8004aa4:	e005      	b.n	8004ab2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f8b0 	bl	8004c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 f8c1 	bl	8004c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f003 0308 	and.w	r3, r3, #8
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d020      	beq.n	8004b04 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f003 0308 	and.w	r3, r3, #8
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d01b      	beq.n	8004b04 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f06f 0208 	mvn.w	r2, #8
 8004ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2204      	movs	r2, #4
 8004ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	f003 0303 	and.w	r3, r3, #3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f898 	bl	8004c20 <HAL_TIM_IC_CaptureCallback>
 8004af0:	e005      	b.n	8004afe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f88a 	bl	8004c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 f89b 	bl	8004c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f003 0310 	and.w	r3, r3, #16
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d020      	beq.n	8004b50 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f003 0310 	and.w	r3, r3, #16
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d01b      	beq.n	8004b50 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f06f 0210 	mvn.w	r2, #16
 8004b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2208      	movs	r2, #8
 8004b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f872 	bl	8004c20 <HAL_TIM_IC_CaptureCallback>
 8004b3c:	e005      	b.n	8004b4a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f864 	bl	8004c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 f875 	bl	8004c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00c      	beq.n	8004b74 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d007      	beq.n	8004b74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f06f 0201 	mvn.w	r2, #1
 8004b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fb fe90 	bl	8000894 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00c      	beq.n	8004b98 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d007      	beq.n	8004b98 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f906 	bl	8004da4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00c      	beq.n	8004bbc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d007      	beq.n	8004bbc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f8fe 	bl	8004db8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00c      	beq.n	8004be0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d007      	beq.n	8004be0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f834 	bl	8004c48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f003 0320 	and.w	r3, r3, #32
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00c      	beq.n	8004c04 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f003 0320 	and.w	r3, r3, #32
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d007      	beq.n	8004c04 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f06f 0220 	mvn.w	r2, #32
 8004bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f8c6 	bl	8004d90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c04:	bf00      	nop
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a40      	ldr	r2, [pc, #256]	; (8004d70 <TIM_Base_SetConfig+0x114>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d013      	beq.n	8004c9c <TIM_Base_SetConfig+0x40>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c7a:	d00f      	beq.n	8004c9c <TIM_Base_SetConfig+0x40>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a3d      	ldr	r2, [pc, #244]	; (8004d74 <TIM_Base_SetConfig+0x118>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d00b      	beq.n	8004c9c <TIM_Base_SetConfig+0x40>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a3c      	ldr	r2, [pc, #240]	; (8004d78 <TIM_Base_SetConfig+0x11c>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d007      	beq.n	8004c9c <TIM_Base_SetConfig+0x40>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a3b      	ldr	r2, [pc, #236]	; (8004d7c <TIM_Base_SetConfig+0x120>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d003      	beq.n	8004c9c <TIM_Base_SetConfig+0x40>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a3a      	ldr	r2, [pc, #232]	; (8004d80 <TIM_Base_SetConfig+0x124>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d108      	bne.n	8004cae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a2f      	ldr	r2, [pc, #188]	; (8004d70 <TIM_Base_SetConfig+0x114>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d01f      	beq.n	8004cf6 <TIM_Base_SetConfig+0x9a>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cbc:	d01b      	beq.n	8004cf6 <TIM_Base_SetConfig+0x9a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a2c      	ldr	r2, [pc, #176]	; (8004d74 <TIM_Base_SetConfig+0x118>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d017      	beq.n	8004cf6 <TIM_Base_SetConfig+0x9a>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a2b      	ldr	r2, [pc, #172]	; (8004d78 <TIM_Base_SetConfig+0x11c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d013      	beq.n	8004cf6 <TIM_Base_SetConfig+0x9a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a2a      	ldr	r2, [pc, #168]	; (8004d7c <TIM_Base_SetConfig+0x120>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d00f      	beq.n	8004cf6 <TIM_Base_SetConfig+0x9a>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a29      	ldr	r2, [pc, #164]	; (8004d80 <TIM_Base_SetConfig+0x124>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d00b      	beq.n	8004cf6 <TIM_Base_SetConfig+0x9a>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a28      	ldr	r2, [pc, #160]	; (8004d84 <TIM_Base_SetConfig+0x128>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d007      	beq.n	8004cf6 <TIM_Base_SetConfig+0x9a>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a27      	ldr	r2, [pc, #156]	; (8004d88 <TIM_Base_SetConfig+0x12c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d003      	beq.n	8004cf6 <TIM_Base_SetConfig+0x9a>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a26      	ldr	r2, [pc, #152]	; (8004d8c <TIM_Base_SetConfig+0x130>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d108      	bne.n	8004d08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a10      	ldr	r2, [pc, #64]	; (8004d70 <TIM_Base_SetConfig+0x114>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d00f      	beq.n	8004d54 <TIM_Base_SetConfig+0xf8>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a12      	ldr	r2, [pc, #72]	; (8004d80 <TIM_Base_SetConfig+0x124>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d00b      	beq.n	8004d54 <TIM_Base_SetConfig+0xf8>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a11      	ldr	r2, [pc, #68]	; (8004d84 <TIM_Base_SetConfig+0x128>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d007      	beq.n	8004d54 <TIM_Base_SetConfig+0xf8>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a10      	ldr	r2, [pc, #64]	; (8004d88 <TIM_Base_SetConfig+0x12c>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d003      	beq.n	8004d54 <TIM_Base_SetConfig+0xf8>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a0f      	ldr	r2, [pc, #60]	; (8004d8c <TIM_Base_SetConfig+0x130>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d103      	bne.n	8004d5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	691a      	ldr	r2, [r3, #16]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	615a      	str	r2, [r3, #20]
}
 8004d62:	bf00      	nop
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40012c00 	.word	0x40012c00
 8004d74:	40000400 	.word	0x40000400
 8004d78:	40000800 	.word	0x40000800
 8004d7c:	40000c00 	.word	0x40000c00
 8004d80:	40013400 	.word	0x40013400
 8004d84:	40014000 	.word	0x40014000
 8004d88:	40014400 	.word	0x40014400
 8004d8c:	40014800 	.word	0x40014800

08004d90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <memset>:
 8004dcc:	4402      	add	r2, r0
 8004dce:	4603      	mov	r3, r0
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d100      	bne.n	8004dd6 <memset+0xa>
 8004dd4:	4770      	bx	lr
 8004dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dda:	e7f9      	b.n	8004dd0 <memset+0x4>

08004ddc <__libc_init_array>:
 8004ddc:	b570      	push	{r4, r5, r6, lr}
 8004dde:	4d0d      	ldr	r5, [pc, #52]	; (8004e14 <__libc_init_array+0x38>)
 8004de0:	4c0d      	ldr	r4, [pc, #52]	; (8004e18 <__libc_init_array+0x3c>)
 8004de2:	1b64      	subs	r4, r4, r5
 8004de4:	10a4      	asrs	r4, r4, #2
 8004de6:	2600      	movs	r6, #0
 8004de8:	42a6      	cmp	r6, r4
 8004dea:	d109      	bne.n	8004e00 <__libc_init_array+0x24>
 8004dec:	4d0b      	ldr	r5, [pc, #44]	; (8004e1c <__libc_init_array+0x40>)
 8004dee:	4c0c      	ldr	r4, [pc, #48]	; (8004e20 <__libc_init_array+0x44>)
 8004df0:	f000 f818 	bl	8004e24 <_init>
 8004df4:	1b64      	subs	r4, r4, r5
 8004df6:	10a4      	asrs	r4, r4, #2
 8004df8:	2600      	movs	r6, #0
 8004dfa:	42a6      	cmp	r6, r4
 8004dfc:	d105      	bne.n	8004e0a <__libc_init_array+0x2e>
 8004dfe:	bd70      	pop	{r4, r5, r6, pc}
 8004e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e04:	4798      	blx	r3
 8004e06:	3601      	adds	r6, #1
 8004e08:	e7ee      	b.n	8004de8 <__libc_init_array+0xc>
 8004e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e0e:	4798      	blx	r3
 8004e10:	3601      	adds	r6, #1
 8004e12:	e7f2      	b.n	8004dfa <__libc_init_array+0x1e>
 8004e14:	08004f74 	.word	0x08004f74
 8004e18:	08004f74 	.word	0x08004f74
 8004e1c:	08004f74 	.word	0x08004f74
 8004e20:	08004f7c 	.word	0x08004f7c

08004e24 <_init>:
 8004e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e26:	bf00      	nop
 8004e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e2a:	bc08      	pop	{r3}
 8004e2c:	469e      	mov	lr, r3
 8004e2e:	4770      	bx	lr

08004e30 <_fini>:
 8004e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e32:	bf00      	nop
 8004e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e36:	bc08      	pop	{r3}
 8004e38:	469e      	mov	lr, r3
 8004e3a:	4770      	bx	lr
